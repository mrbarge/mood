const ENVELOPE_PRESETS={SLOW_ETHEREAL:{attack:8,decay:2,sustain:.8,release:12},VERY_SLOW_ETHEREAL:{attack:10,decay:3,sustain:.9,release:15},ULTRA_SLOW_ETHEREAL:{attack:12,decay:3,sustain:.95,release:20},FAST_TRANSIENT:{attack:.01,decay:.5,sustain:0,release:.1},MEDIUM_SUSTAIN:{attack:2,decay:1,sustain:.5,release:4},LONG_SUSTAIN:{attack:3,decay:2,sustain:.8,release:8},CATHEDRAL:{attack:8,decay:3,sustain:.9,release:18},GLACIAL:{attack:12,decay:3,sustain:.95,release:20},ORCHESTRAL:{attack:10,decay:4,sustain:.8,release:15},CONTINUOUS_DRONE:{attack:8,decay:0,sustain:1,release:12}},FILTER_PRESETS={WARM_LOWPASS:{frequency:1200,type:"lowpass",Q:2},BRIGHT_LOWPASS:{frequency:2e3,type:"lowpass",Q:3},SOFT_LOWPASS:{frequency:1500,type:"lowpass",Q:1},CATHEDRAL_LOWPASS:{frequency:1500,type:"lowpass",Q:1},GLACIAL_LOWPASS:{frequency:900,type:"lowpass",Q:1.5},DEEP_LOWPASS:{frequency:400,type:"lowpass",Q:8},RESONANT_BANDPASS:{frequency:1200,type:"bandpass",Q:8},BRIGHT_BANDPASS:{frequency:1500,type:"bandpass",Q:5},GLASS_HIGHPASS:{frequency:2500,type:"highpass",Q:4},ORCHESTRAL_LOWPASS:{frequency:2e3,type:"lowpass",Q:3}},REVERB_PRESETS={STANDARD:{decay:10,roomSize:.7,preDelay:.01},CATHEDRAL:{decay:30,roomSize:.99,preDelay:.05},GLACIAL:{decay:25,roomSize:.97,preDelay:.08},DEEP_SPACE:{decay:15,roomSize:.9,preDelay:.02},INTIMATE:{decay:6,roomSize:.7,preDelay:.02},LARGE_HALL:{decay:18,roomSize:.9,preDelay:.03},CAVERNOUS:{decay:22,roomSize:.95,preDelay:.04}},LFO_PRESETS={SLOW_FILTER_SWEEP:{frequency:.15,type:"sine"},VERY_SLOW_SWEEP:{frequency:.05,type:"triangle"},PRAYER_BREATHING:{frequency:.04,type:"sine"},GLACIAL_MOVEMENT:{frequency:.03,type:"sine"},GENTLE_SWELL:{frequency:.12,type:"triangle"},GOLDEN_RATIO:{frequency:.618,type:"sine"}};class EffectFactory{static createReverb(e="STANDARD",t=.5){const a=REVERB_PRESETS[e];return new Tone.Reverb({decay:a.decay,wet:t,roomSize:a.roomSize,preDelay:a.preDelay})}static createFilter(e="WARM_LOWPASS"){const t=FILTER_PRESETS[e];return new Tone.Filter({frequency:t.frequency,type:t.type,Q:t.Q})}static createLFO(e="SLOW_FILTER_SWEEP",t=800,a=1600){const r=LFO_PRESETS[e],n=new Tone.LFO({frequency:r.frequency,min:t,max:a,type:r.type});return n.start(),n}static createChorus(e=.5,t=3.5,a=.5,r=.4){const n=new Tone.Chorus({frequency:e,delayTime:t,depth:a,wet:r});return n.start(),n}static createDelay(e="pingpong",t="8n",a=.3,r=.25){return"pingpong"===e?new Tone.PingPongDelay({delayTime:t,feedback:a,wet:r}):new Tone.FeedbackDelay({delayTime:t,feedback:a,wet:r})}static createDistortion(e=.4,t=.3){return new Tone.Distortion({distortion:e,wet:t})}static createPhaser(e=.15,t=.8,a=400){return new Tone.Phaser({frequency:e,depth:t,baseFrequency:a})}static createFrequencyShifter(e=47,t=.25){return new Tone.FrequencyShifter({frequency:e,wet:t})}static createBitCrusher(e=6,t=.3){return new Tone.BitCrusher({bits:e,wet:t})}static createStereoWidener(e=.5){return new Tone.StereoWidener(e)}static createCompressor(e=-18,t=4,a=.001,r=.2){return new Tone.Compressor({threshold:e,ratio:t,attack:a,release:r})}static createGain(e=.8){return new Tone.Gain(e)}}class SynthFactory{static createPad(e="sine",t="SLOW_ETHEREAL",a=-8){const r=ENVELOPE_PRESETS[t];return new Tone.PolySynth(Tone.Synth,{oscillator:{type:e},envelope:r,volume:a})}static createMonoSynth(e="sine",t="CONTINUOUS_DRONE",a=-5){const r=ENVELOPE_PRESETS[t];return new Tone.MonoSynth({oscillator:{type:e},envelope:r,volume:a})}static createFMSynth(e=8,t=2,a="FAST_TRANSIENT",r=-15){const n=ENVELOPE_PRESETS[a];return new Tone.PolySynth(Tone.FMSynth,{harmonicity:e,modulationIndex:t,oscillator:{type:"sine"},envelope:n,modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:.5,sustain:.2,release:2},volume:r})}static createMetalSynth(e=3.1,t=1e3,a=12,r=-25){return new Tone.PolySynth(Tone.MetalSynth,{harmonicity:e,resonance:t,modulationIndex:a,envelope:ENVELOPE_PRESETS.FAST_TRANSIENT,volume:r})}}class AudioChainBuilder{constructor(e){this.source=e,this.chain=[e],this.effects=[],this.lfos=[]}addFilter(e="WARM_LOWPASS"){const t=EffectFactory.createFilter(e);return this._connectNext(t),this}addFilterWithLFO(e="WARM_LOWPASS",t="SLOW_FILTER_SWEEP",a=800,r=1600){const n=EffectFactory.createFilter(e),i=EffectFactory.createLFO(t,a,r);return i.connect(n.frequency),this._connectNext(n),this.lfos.push(i),this}addReverb(e="STANDARD",t=.5){const a=EffectFactory.createReverb(e,t);return this._connectNext(a),this}addChorus(e=.5,t=3.5,a=.5,r=.4){const n=EffectFactory.createChorus(e,t,a,r);return this._connectNext(n),this}addDelay(e="pingpong",t="8n",a=.3,r=.25){const n=EffectFactory.createDelay(e,t,a,r);return this._connectNext(n),this}addDistortion(e=.4,t=.3){const a=EffectFactory.createDistortion(e,t);return this._connectNext(a),this}addPhaser(e=.15,t=.8,a=400){const r=EffectFactory.createPhaser(e,t,a);return this._connectNext(r),this}addFrequencyShifter(e=47,t=.25){const a=EffectFactory.createFrequencyShifter(e,t);return this._connectNext(a),this}addBitCrusher(e=6,t=.3){const a=EffectFactory.createBitCrusher(e,t);return this._connectNext(a),this}addStereoWidener(e=.5){const t=EffectFactory.createStereoWidener(e);return this._connectNext(t),this}addCompressor(e=-18,t=4,a=.001,r=.2){const n=EffectFactory.createCompressor(e,t,a,r);return this._connectNext(n),this}addGain(e=.8){const t=EffectFactory.createGain(e);return this._connectNext(t),this}addGainWithLFO(e=.8,t="GENTLE_SWELL",a=.3,r=1.2){const n=EffectFactory.createGain(e),i=EffectFactory.createLFO(t,a,r);return i.connect(n.gain),this._connectNext(n),this.lfos.push(i),this}addIDMChain(){return this.addBitCrusher(6,.3).addFrequencyShifter(47,.25).addPhaser(.7,.8,400).addDelay("pingpong","16n",.6,.4).addDelay("feedback","8n.",.5,.3).addFilter("RESONANT_BANDPASS").addDistortion(.4,.3).addChorus(1.2,2,.4,.35).addCompressor(-18,4,.001,.2)}addPianoChain(){return this.addChorus(.5,3.5,.3,.4).addDelay("pingpong","16n",.1,.3).addDelay("feedback","4n.",.3,.25).addFilter("BRIGHT_LOWPASS").addCompressor(-20,3,.003,.1)}addHarpChain(){return this.addDelay("pingpong","8n",.3,.25)}addCosmicChain(){return this.addChorus(.2,4,.8)}addUnderwaterChain(){return this.addFilterWithLFO("DEEP_LOWPASS","SLOW_FILTER_SWEEP",200,600)}addNeonChain(){return this.addDistortion(.4).addChorus(.5,2.5,.5)}addAtmosphericChain(){return this.addFilterWithLFO("SOFT_LOWPASS","SLOW_FILTER_SWEEP",1e3,2e3)}addGlassChain(){return this.addFilter("GLASS_HIGHPASS").addChorus(.3,3,.7)}addNebulaChain(){return this.addGainWithLFO(.6,"VERY_SLOW_SWEEP",.3,1)}addThermalChain(){return this.addFilter("WARM_LOWPASS").addGainWithLFO(.7,"GENTLE_SWELL",.4,1.2)}addAuroraChain(){return this.addFilterWithLFO("BRIGHT_BANDPASS","SLOW_FILTER_SWEEP",800,2e3).addGainWithLFO(.8,"GENTLE_SWELL",.5,1.5)}addCathedralChain(){return this.addFilterWithLFO("CATHEDRAL_LOWPASS","PRAYER_BREATHING",1250,1750).addChorus(.3,5,.15,.4).addStereoWidener(.9)}addGlacialChain(){return this.addFilterWithLFO("GLACIAL_LOWPASS","GLACIAL_MOVEMENT",750,1050).addChorus(.1,8,.08,.3).addStereoWidener(.4)}addStringChain(){return this.addFilter("ORCHESTRAL_LOWPASS").addChorus(.1,2,.6)}addHexagonChain(){return this.addFilterWithLFO("BRIGHT_BANDPASS","GOLDEN_RATIO",1200,2400)}addParallelDimensionChain(){return this.addPhaser(.15,.8,400).addPhaser(.08,.6,800).addFilter("BRIGHT_BANDPASS")}addGentleRhubarbChain(){return this.addFrequencyShifter(3,.15).addFilterWithLFO("WARM_LOWPASS","SLOW_FILTER_SWEEP",800,1600).addDistortion(.05,1).addFilter("BRIGHT_LOWPASS").addChorus(1.5,3.5,.5,.4)}addEtherealRhubarbChain(){return this.addFrequencyShifter(2,.1).addFilterWithLFO("BRIGHT_BANDPASS","VERY_SLOW_SWEEP",1200,1800).addFilter("BRIGHT_LOWPASS").addChorus(.8,5,.6,.5)}connectTo(e){return this.chain[this.chain.length-1].connect(e),{effects:this.effects.slice(),lfos:this.lfos.slice(),chain:this.chain.slice()}}_connectNext(e){return this.chain[this.chain.length-1].connect(e),this.chain.push(e),this.effects.push(e),this}getOutput(){return this.chain[this.chain.length-1]}static createStandardPad(e,t=.5){const a=SynthFactory.createPad("sine","SLOW_ETHEREAL");return new AudioChainBuilder(a).addReverb("STANDARD",t).connectTo(e)}static createCathedralPad(e,t=.5){const a=SynthFactory.createPad("sine","CATHEDRAL");return new AudioChainBuilder(a).addCathedralChain().addReverb("CATHEDRAL",t).connectTo(e)}static createIDMSynth(e,t=.5){const a=SynthFactory.createFMSynth(2.1,8,"MEDIUM_SUSTAIN",5);return new AudioChainBuilder(a).addIDMChain().addReverb("STANDARD",.8*t).connectTo(e)}}
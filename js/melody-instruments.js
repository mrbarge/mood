class BaseMelodyInstrument{constructor(e,t={}){this.name=e,this.config={volume:-5,reverbAmount:.5,...t},this.synth=null,this.effects=[],this.isActive=!1,this.timeout=null,this.instrumentType=e.toLowerCase().replace(/\s+/g,"-")}async initialize(e,t){this.masterVolume=e,this.globalReverb=t}start(e,t){this.timeout&&(clearTimeout(this.timeout),this.timeout=null),this.isActive||(this.isActive=!0,this.currentScale=e,this.currentPattern=t,this.startMelodicPhrases())}stop(){if(this.isActive=!1,this.timeout&&(clearTimeout(this.timeout),this.timeout=null),this.synth)try{this.synth.releaseAll?this.synth.releaseAll():this.synth.triggerRelease&&this.synth.triggerRelease()}catch(e){console.debug("Error releasing synth:",e)}}dispose(){this.stop(),setTimeout(()=>{if(this.synth)try{this.synth.dispose()}catch(e){console.debug("Error disposing synth:",e)}this.effects.forEach(e=>{if(e&&e.dispose)try{e.dispose()}catch(e){console.debug("Error disposing effect:",e)}}),this.synth=null,this.effects=[]},500)}startMelodicPhrases(){const e=()=>{if(!this.isActive)return;this.timeout&&(clearTimeout(this.timeout),this.timeout=null);const t=Math.floor(5*Math.random())+3,s=this.currentPattern[Math.floor(Math.random()*this.currentPattern.length)],n=this.currentScale.indexOf(s);if(-1!==n){const e=[];let s=n;e.push(this.currentScale[s]);for(let n=1;n<t;n++){const t=Math.floor(5*Math.random())-2;s=Math.min(Math.max(0,s+t),this.currentScale.length-1),e.push(this.currentScale[s])}this.playMelodicSequence(e)}const i=1e3*(6*(11-("undefined"!=typeof melodicFrequencySlider?parseInt(melodicFrequencySlider.value):5))+10*Math.random());this.isActive&&(this.timeout=setTimeout(e,i))};this.isActive&&(this.timeout=setTimeout(e,5e3*Math.random()+1e4))}playMelodicSequence(e){throw new Error("playMelodicSequence() must be implemented by subclass")}updateReverbAmount(e){this.config.reverbAmount=e,this.reverbNode&&(this.reverbNode.wet.value=e)}setVolume(e){this.synth&&this.synth.volume&&(this.synth.volume.value=e)}}class PianoInstrument extends BaseMelodyInstrument{constructor(){super("Piano")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"triangle"},envelope:{attack:.02,decay:.1,sustain:.3,release:1}});const s=new Tone.PingPongDelay({delayTime:"8n",feedback:.3,wet:.25});this.reverbNode=new Tone.Reverb({decay:10,wet:this.config.reverbAmount,preDelay:.03}),this.synth.connect(s),s.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=.8*t*1e3;s+=.2*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"melodic"});try{this.synth.triggerAttackRelease(e,1.5)}catch(e){console.debug("Note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},2e3)}},s)})}}class GlitchElectronicInstrument extends BaseMelodyInstrument{constructor(){super("Glitch Electronic"),this.glitchVariants=["stutterChop","granularCrush","ringModChaos","filterGlitch","timeStretch","pitchShift","spectralFold","digitalArtifact"],this.currentVariant=null,this.variantTimeout=null}async initialize(e,t){super.initialize(e,t),this.synths={fm:new Tone.PolySynth(Tone.FMSynth,{harmonicity:2.1,modulationIndex:8,oscillator:{type:"sawtooth"},envelope:{attack:.001,decay:.3,sustain:.4,release:2},modulation:{type:"square"},modulationEnvelope:{attack:.01,decay:.2,sustain:.3,release:1.5},volume:-5}),metal:new Tone.PolySynth(Tone.MetalSynth,{harmonicity:12,resonance:800,modulationIndex:25,envelope:{attack:.001,decay:.4,sustain:.1,release:1.2},volume:-15}),am:new Tone.PolySynth(Tone.AMSynth,{harmonicity:3.5,oscillator:{type:"square"},envelope:{attack:.01,decay:.2,sustain:.3,release:1},modulation:{type:"sawtooth"},modulationEnvelope:{attack:.02,decay:.2,sustain:.3,release:.8},volume:-8})},this.effectChains=this.createGlitchEffectChains(e),this.selectRandomVariant(),this.scheduleVariantChanges()}createGlitchEffectChains(e){const t={};return t.stutterChop={bitCrusher:new Tone.BitCrusher({bits:4,wet:.6}),chopDelay:new Tone.PingPongDelay({delayTime:"32n",feedback:.8,wet:.7}),gate:new Tone.Gate({threshold:-20,attack:.001,release:.01}),tremolo:new Tone.Tremolo({frequency:16,depth:.8,wet:.5}).start(),compressor:new Tone.Compressor({threshold:-12,ratio:8})},t.granularCrush={bitCrusher:new Tone.BitCrusher({bits:3,wet:.8}),distortion:new Tone.Distortion({distortion:.8,wet:.6}),autoFilter:new Tone.AutoFilter({frequency:8,baseFrequency:200,octaves:4,wet:.7}).start(),freqShift:new Tone.FrequencyShifter({frequency:120,wet:.4}),limiter:new Tone.Limiter(-3)},t.ringModChaos={ringMod1:new Tone.FrequencyShifter({frequency:89,wet:.6}),ringMod2:new Tone.FrequencyShifter({frequency:157,wet:.4}),phaser:new Tone.Phaser({frequency:2.3,depth:.9,baseFrequency:350,wet:.8}),delay:new Tone.FeedbackDelay({delayTime:"16n.",feedback:.7,wet:.5}),filter:new Tone.Filter({frequency:1500,type:"bandpass",Q:12})},t.filterGlitch={filter1:new Tone.Filter({frequency:800,type:"lowpass",Q:15}),filter2:new Tone.Filter({frequency:2e3,type:"highpass",Q:8}),lfo1:new Tone.LFO({frequency:7.3,min:300,max:3e3,type:"square"}),lfo2:new Tone.LFO({frequency:.37,min:500,max:5e3,type:"sawtooth"}),chorus:new Tone.Chorus({frequency:3.2,delayTime:1.5,depth:.7,wet:.6}).start(),gain:new Tone.Gain(.8)},t.timeStretch={pitchShift1:new Tone.PitchShift({pitch:7,wet:.3}),pitchShift2:new Tone.PitchShift({pitch:-12,wet:.2}),delay:new Tone.PingPongDelay({delayTime:"8n.",feedback:.6,wet:.4}),vibrato:new Tone.Vibrato({frequency:6.4,depth:.4,wet:.5}),reverb:new Tone.Reverb({decay:4,wet:.3})},t.pitchShift={shift1:new Tone.PitchShift({pitch:19,wet:.4}),shift2:new Tone.PitchShift({pitch:-7,wet:.3}),shift3:new Tone.PitchShift({pitch:24,wet:.2}),chebyshev:new Tone.Chebyshev({order:50,wet:.3}),autoWah:new Tone.AutoWah({baseFrequency:100,octaves:6,sensitivity:-10,wet:.6})},t.spectralFold={chebyshev1:new Tone.Chebyshev({order:30,wet:.5}),chebyshev2:new Tone.Chebyshev({order:80,wet:.3}),filter:new Tone.Filter({frequency:1200,type:"bandpass",Q:20}),lfo:new Tone.LFO({frequency:.23,min:400,max:4e3,type:"triangle"}),feedback:new Tone.FeedbackDelay({delayTime:"32n",feedback:.9,wet:.3})},t.digitalArtifact={bitCrusher:new Tone.BitCrusher({bits:6,wet:.5}),jcreverb:new Tone.JCReverb({roomSize:.2,wet:.4}),autoFilter:new Tone.AutoFilter({frequency:12,baseFrequency:800,octaves:3,wet:.6}).start(),tremolo:new Tone.Tremolo({frequency:23,depth:.6,wet:.4}).start(),compressor:new Tone.Compressor({threshold:-18,ratio:6})},t.filterGlitch.lfo1&&(t.filterGlitch.lfo1.connect(t.filterGlitch.filter1.frequency),t.filterGlitch.lfo1.start()),t.filterGlitch.lfo2&&(t.filterGlitch.lfo2.connect(t.filterGlitch.filter2.frequency),t.filterGlitch.lfo2.start()),t.spectralFold.lfo&&(t.spectralFold.lfo.connect(t.spectralFold.filter.frequency),t.spectralFold.lfo.start()),this.reverbNode=new Tone.Reverb({decay:6,wet:.7*this.config.reverbAmount,preDelay:.02,roomSize:.6}),Object.values(t).forEach(e=>{const t=Object.values(e);t[t.length-1].connect(this.reverbNode)}),this.reverbNode.connect(e),Object.values(t).forEach(e=>{this.effects.push(...Object.values(e))}),this.effects.push(this.reverbNode),t}selectRandomVariant(){const e=this.currentVariant;do{this.currentVariant=this.glitchVariants[Math.floor(Math.random()*this.glitchVariants.length)]}while(this.currentVariant===e&&this.glitchVariants.length>1);console.debug(`Glitch variant changed to: ${this.currentVariant}`),this.connectCurrentVariant()}connectCurrentVariant(){let e;switch(Object.values(this.synths).forEach(e=>{try{e.disconnect()}catch(e){}}),this.currentVariant){case"stutterChop":case"granularCrush":case"digitalArtifact":e=this.synths.fm;break;case"ringModChaos":case"spectralFold":e=this.synths.metal;break;default:e=this.synths.am}this.synth=e;const t=this.effectChains[this.currentVariant];t&&this.connectEffectChain(e,t)}connectEffectChain(e,t){switch(this.currentVariant){case"filterGlitch":this.connectFilterGlitchChain(e,t);break;case"spectralFold":this.connectSpectralFoldChain(e,t);break;default:this.connectStandardChain(e,t)}}connectStandardChain(e,t){const s=Object.values(t).filter(e=>e&&"function"==typeof e.connect);if(0!==s.length){e.connect(s[0]);for(let e=0;e<s.length-1;e++)try{s[e].connect(s[e+1])}catch(e){console.debug("Effect connection error:",e)}}}connectFilterGlitchChain(e,t){const{filter1:s,filter2:n,lfo1:i,lfo2:o,chorus:a,gain:r}=t;e.connect(s),s.connect(n),n.connect(a),a.connect(r)}connectSpectralFoldChain(e,t){const{chebyshev1:s,chebyshev2:n,filter:i,lfo:o,feedback:a}=t;e.connect(s),s.connect(n),n.connect(i),i.connect(a)}scheduleVariantChanges(){this.variantTimeout&&clearTimeout(this.variantTimeout);const e=1e3*(15+30*Math.random());this.variantTimeout=setTimeout(()=>{this.isActive&&(this.selectRandomVariant(),this.scheduleVariantChanges())},e)}playMelodicSequence(e){this.applyVariantModifications(e).forEach((e,t)=>{let s=.7*t*1e3;const n=this.getVariantTimingChaos();s+=(Math.random()-.5)*n*1e3,s=Math.max(0,s),setTimeout(()=>{if(!this.isActive)return;const{note:t,duration:s,velocity:n}=e;"undefined"!=typeof activeNotes&&(activeNotes[t]?activeNotes[t].count++:activeNotes[t]={count:1,type:"glitch"});try{this.triggerVariantNote(t,s,n)}catch(e){console.debug("Glitch note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[t]&&(activeNotes[t].count--,activeNotes[t].count<=0&&delete activeNotes[t])},1e3*s+500)},s)})}applyVariantModifications(e){return e.map(e=>{let t=e,s=.6,n=1;switch(this.currentVariant){case"stutterChop":s=Math.random()<.4?.2:.8;break;case"granularCrush":if(Math.random()<.3){const s=e.slice(0,-1),n=parseInt(e.slice(-1));t=s+Math.max(1,Math.min(7,n+(Math.random()<.5?-2:2)))}s=.3+.6*Math.random();break;case"ringModChaos":s=1.2+.8*Math.random();break;case"timeStretch":s=1.5+1.5*Math.random();break;case"pitchShift":if(Math.random()<.5){const s=e.slice(0,-1),n=parseInt(e.slice(-1)),i=Math.random()<.5?1:-1;t=s+Math.max(1,Math.min(7,n+i))}s=.8+.8*Math.random();break;case"spectralFold":s=1+1*Math.random(),n=.7+.6*Math.random();break;case"digitalArtifact":s=.4+.4*Math.random();break;default:s=.6+.6*Math.random()}return{note:t,duration:s,velocity:n}})}getVariantTimingChaos(){switch(this.currentVariant){case"stutterChop":return.8;case"granularCrush":return 1.2;case"digitalArtifact":return.6;default:return.4}}triggerVariantNote(e,t,s){switch(this.currentVariant){case"stutterChop":if(Math.random()<.3)for(let t=0;t<3;t++)setTimeout(()=>{this.isActive&&this.synth.triggerAttackRelease(e,.1,void 0,s)},100*t);else this.synth.triggerAttackRelease(e,t,void 0,s);break;case"granularCrush":const n=Math.floor(3*Math.random())+1;for(let i=0;i<n;i++)setTimeout(()=>{this.isActive&&this.synth.triggerAttackRelease(e,t/n,void 0,s*(.5+.5*Math.random()))},i*(1e3*t/n/2));break;default:this.synth.triggerAttackRelease(e,t,void 0,s)}}stop(){super.stop(),this.variantTimeout&&(clearTimeout(this.variantTimeout),this.variantTimeout=null)}dispose(){this.variantTimeout&&(clearTimeout(this.variantTimeout),this.variantTimeout=null),Object.values(this.synths).forEach(e=>{if(e&&e.dispose)try{e.dispose()}catch(e){console.debug("Error disposing glitch synth:",e)}}),super.dispose()}}class SampledPianoInstrument extends BaseMelodyInstrument{constructor(){super("Sampled Piano")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.Sampler({urls:{C4:"C4.mp3","D#4":"Ds4.mp3","F#4":"Fs4.mp3",A4:"A4.mp3",C5:"C5.mp3","D#5":"Ds5.mp3","F#5":"Fs5.mp3",A5:"A5.mp3"},release:1,baseUrl:"https://tonejs.github.io/audio/salamander/",volume:0});const s=new Tone.Chorus({frequency:.5,delayTime:3.5,depth:.3,wet:.4}).start(),n=new Tone.PingPongDelay({delayTime:"16n",feedback:.1,wet:.3}),i=new Tone.FeedbackDelay({delayTime:"4n.",feedback:.3,wet:.25}),o=new Tone.Filter({frequency:4e3,type:"lowpass",rolloff:-12}),a=new Tone.Compressor({threshold:-20,ratio:3,attack:.003,release:.1});this.reverbNode=new Tone.Reverb({decay:12,wet:this.config.reverbAmount,preDelay:.05,roomSize:.9});const r=new Tone.Tremolo({frequency:.3,depth:.1,wet:.6}).start();this.synth.connect(s),s.connect(n),n.connect(i),i.connect(o),o.connect(a),a.connect(r),r.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,o,a,r,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=1*t*1e3;s+=.2*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"melodic"});try{this.synth.loaded?this.synth.triggerAttackRelease(e,2):this.synth.loaded.then(()=>{this.isActive&&this.synth.triggerAttackRelease(e,2)})}catch(e){console.debug("Note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},2500)}},s)})}}class MarimbaInstrument extends BaseMelodyInstrument{constructor(){super("Marimba")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"sine"},envelope:{attack:.01,decay:.5,sustain:0,release:.1}});const s=new Tone.PingPongDelay({delayTime:"8n",feedback:.3,wet:.25});this.reverbNode=new Tone.Reverb({decay:10,wet:this.config.reverbAmount,preDelay:.03}),this.synth.connect(s),s.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=.6*t*1e3;s+=.2*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"melodic"});try{this.synth.triggerAttackRelease(e,.5)}catch(e){console.debug("Note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},1e3)}},s)})}}class HarpInstrument extends BaseMelodyInstrument{constructor(){super("Harp")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.FMSynth,{harmonicity:1.5,modulationIndex:10,oscillator:{type:"sine"},envelope:{attack:.01,decay:.7,sustain:.1,release:1},modulation:{type:"triangle"},modulationEnvelope:{attack:.05,decay:.5,sustain:.2,release:.5},volume:-5});const s=new Tone.PingPongDelay({delayTime:"8n",feedback:.3,wet:.25});this.reverbNode=new Tone.Reverb({decay:10,wet:this.config.reverbAmount,preDelay:.03}),this.synth.connect(s),s.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=.7*t*1e3;s+=.2*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"melodic"});try{this.synth.triggerAttackRelease(e,1)}catch(e){console.debug("Note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},1500)}},s)})}}class MusicBoxInstrument extends BaseMelodyInstrument{constructor(){super("Music Box")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.MetalSynth,{harmonicity:3.1,resonance:1e3,modulationIndex:12,envelope:{attack:.001,decay:1,sustain:0,release:.5},volume:-25});const s=new Tone.PingPongDelay({delayTime:"8n",feedback:.3,wet:.25});this.reverbNode=new Tone.Reverb({decay:10,wet:this.config.reverbAmount,preDelay:.03}),this.synth.connect(s),s.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=.4*t*1e3;s+=.2*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"melodic"});try{this.synth.triggerAttackRelease(e,.3)}catch(e){console.debug("Note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},800)}},s)})}}class CrystalBellsInstrument extends BaseMelodyInstrument{constructor(){super("Crystal Bells")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.MetalSynth,{harmonicity:2.1,resonance:2400,modulationIndex:15,envelope:{attack:.001,decay:1.5,sustain:.2,release:3},volume:-20});const s=new Tone.PingPongDelay({delayTime:"16n",feedback:.4,wet:.35}),n=new Tone.Chorus({frequency:.3,delayTime:4,depth:.6,wet:.5}).start(),i=new Tone.Filter({frequency:3e3,type:"highpass",Q:2});this.reverbNode=new Tone.Reverb({decay:15,wet:this.config.reverbAmount,preDelay:.03,roomSize:.8}),this.synth.connect(i),i.connect(s),s.connect(n),n.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=1.2*t*1e3;s+=.3*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"crystal"});try{this.synth.triggerAttackRelease(e,2.5)}catch(e){console.debug("Crystal bells playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},3500)}},s)})}}class WarmStringsInstrument extends BaseMelodyInstrument{constructor(){super("Warm Strings")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"fatsawtooth",detune:5},envelope:{attack:1.2,decay:.8,sustain:.7,release:2.5},volume:-8});const s=new Tone.Filter({frequency:2200,type:"lowpass",Q:2}),n=new Tone.Filter({frequency:800,type:"lowpass",Q:.8}),i=new Tone.Chorus({frequency:.2,delayTime:6,depth:.3,wet:.4}).start(),o=new Tone.Tremolo({frequency:.1,depth:.15,wet:.6}).start();this.reverbNode=new Tone.Reverb({decay:12,wet:this.config.reverbAmount,preDelay:.05,roomSize:.9}),this.synth.connect(s),s.connect(n),n.connect(i),i.connect(o),o.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,o,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=1.8*t*1e3;s+=.4*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"strings"});try{this.synth.triggerAttackRelease(e,4)}catch(e){console.debug("Warm strings playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},4500)}},s)})}}class EtherealChoirInstrument extends BaseMelodyInstrument{constructor(){super("Ethereal Choir")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.FMSynth,{harmonicity:.5,modulationIndex:8,oscillator:{type:"sine"},envelope:{attack:3,decay:2,sustain:.8,release:8},modulation:{type:"triangle"},modulationEnvelope:{attack:2,decay:1.5,sustain:.7,release:6},volume:-3}),this.formantVoice=new Tone.PolySynth(Tone.AMSynth,{harmonicity:1.5,oscillator:{type:"sawtooth"},envelope:{attack:4,decay:1,sustain:.9,release:10},modulation:{type:"square"},modulationEnvelope:{attack:3,decay:2,sustain:.6,release:8},volume:-3}),this.whisperVoice=new Tone.Noise("pink"),this.whisperEnv=new Tone.AmplitudeEnvelope({attack:6,decay:3,sustain:.4,release:12}),this.whisperGain=new Tone.Gain(.3),this.droneVoice=new Tone.Synth({oscillator:{type:"triangle"},envelope:{attack:10,decay:5,sustain:.9,release:20},volume:-6});const s=new Tone.Filter({frequency:800,type:"bandpass",Q:8}),n=new Tone.LFO({frequency:.1,min:400,max:1600,type:"sine"});n.connect(s.frequency),n.start();const i=new Tone.Filter({frequency:2e3,type:"lowpass",Q:2}),o=new Tone.LFO({frequency:.08,min:800,max:3200,type:"sine"});o.connect(i.frequency),o.start();const a=new Tone.Chorus({frequency:.15,delayTime:8,depth:.8,wet:.9}).start(),r=new Tone.PitchShift({pitch:7,wet:.3}),c=new Tone.PingPongDelay({delayTime:"8n",feedback:.6,wet:.4}),h=new Tone.Distortion({distortion:.15,wet:.25}),l=new Tone.AutoWah({baseFrequency:100,octaves:4,sensitivity:-10,Q:2,wet:.3});this.reverbNode=new Tone.Reverb({decay:30,wet:1.3*this.config.reverbAmount,preDelay:.2}),this.synth.connect(s),s.connect(h),h.connect(l),l.connect(r),r.connect(a),this.formantVoice.connect(i),i.connect(c),c.connect(a),this.whisperVoice.connect(this.whisperEnv),this.whisperEnv.connect(this.whisperGain),this.whisperGain.connect(i),this.droneVoice.connect(this.reverbNode),a.connect(this.reverbNode),this.reverbNode.connect(e),this.whisperVoice.start(),this.effects.push(this.formantVoice,this.whisperVoice,this.whisperEnv,this.whisperGain,this.droneVoice,s,n,i,o,a,r,c,h,l,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=3*t*1e3;s+=1.5*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"choir"});try{this.synth.triggerAttackRelease(e,6);const t=Math.random();if(t<.4&&setTimeout(()=>{this.isActive&&this.formantVoice.triggerAttackRelease(e,6*.7)},500+1e3*Math.random()),t<.6&&setTimeout(()=>{this.isActive&&this.whisperEnv.triggerAttackRelease(3)},2e3*Math.random()),t<.25){const t=e.slice(0,-1),s=parseInt(e.slice(-1));if(s>=3){const e=t+(s-2);setTimeout(()=>{this.isActive&&this.droneVoice.triggerAttackRelease(e,9)},2e3+3e3*Math.random())}}}catch(e){console.debug("Experimental choir playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},8e3)}},s)})}stop(){super.stop(),this.whisperVoice&&this.whisperVoice.stop()}}class WindChimesInstrument extends BaseMelodyInstrument{constructor(){super("Wind Chimes")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.FMSynth,{harmonicity:3.1,modulationIndex:8,oscillator:{type:"sine"},envelope:{attack:.01,decay:1.2,sustain:.1,release:2},modulation:{type:"triangle"},modulationEnvelope:{attack:.05,decay:.8,sustain:.2,release:1.5},volume:0});const s=new Tone.PingPongDelay({delayTime:"8n.",feedback:.3,wet:.4}),n=new Tone.Tremolo({frequency:.3,depth:.2,wet:.5}).start(),i=new Tone.Filter({frequency:2500,type:"bandpass",Q:4});this.reverbNode=new Tone.Reverb({decay:8,wet:this.config.reverbAmount,preDelay:.02,roomSize:.7}),this.synth.connect(i),i.connect(s),s.connect(n),n.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=0;if(0===t)s=1e3*Math.random();else{s=Math.random()<.3?1e3*(.8*t*.3+.5*Math.random()):1e3*(.8*t+1.5*Math.random())}setTimeout(()=>{if(!this.isActive)return;Math.random();"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"chimes"});try{const t=.8+1.5*Math.random();this.synth.triggerAttackRelease(e,t)}catch(e){console.debug("Wind chimes playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},2500)},s)})}}class GlassHarmonicsInstrument extends BaseMelodyInstrument{constructor(){super("Glass Harmonics")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"sine"},envelope:{attack:.5,decay:2,sustain:.3,release:3},volume:-6});const s=new Tone.Filter({frequency:4e3,type:"highpass",Q:3}),n=new Tone.FeedbackDelay({delayTime:"4n.",feedback:.4,wet:.3}),i=new Tone.Chorus({frequency:.8,delayTime:2,depth:.4,wet:.5}).start(),o=new Tone.Filter({frequency:8e3,type:"lowpass",Q:1});this.reverbNode=new Tone.Reverb({decay:10,wet:this.config.reverbAmount,preDelay:.04,roomSize:.85}),this.synth.connect(s),s.connect(n),n.connect(i),i.connect(o),o.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,o,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=1.5*t*1e3;s+=.3*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"glass"});try{this.synth.triggerAttackRelease(e,3)}catch(e){console.debug("Glass harmonics playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},3800)}},s)})}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.FMSynth,{harmonicity:.5,modulationIndex:8,oscillator:{type:"sine"},envelope:{attack:3,decay:2,sustain:.8,release:8},modulation:{type:"triangle"},modulationEnvelope:{attack:2,decay:1.5,sustain:.7,release:6},volume:-3}),this.formantVoice=new Tone.PolySynth(Tone.AMSynth,{harmonicity:1.5,oscillator:{type:"sawtooth"},envelope:{attack:4,decay:1,sustain:.9,release:10},modulation:{type:"square"},modulationEnvelope:{attack:3,decay:2,sustain:.6,release:8},volume:-4}),this.whisperVoice=new Tone.Noise("pink"),this.whisperEnv=new Tone.AmplitudeEnvelope({attack:6,decay:3,sustain:.4,release:12}),this.whisperGain=new Tone.Gain(.3),this.droneVoice=new Tone.Synth({oscillator:{type:"triangle"},envelope:{attack:10,decay:5,sustain:.9,release:20},volume:-4});const s=new Tone.Filter({frequency:800,type:"bandpass",Q:8}),n=new Tone.LFO({frequency:.1,min:400,max:1600,type:"sine"});n.connect(s.frequency),n.start();const i=new Tone.Filter({frequency:2e3,type:"lowpass",Q:2}),o=new Tone.LFO({frequency:.08,min:800,max:3200,type:"sine"});o.connect(i.frequency),o.start();const a=new Tone.Chorus({frequency:.15,delayTime:8,depth:.8,wet:.9}).start(),r=new Tone.PitchShift({pitch:7,wet:.3}),c=new Tone.PingPongDelay({delayTime:"8n",feedback:.6,wet:.4}),h=new Tone.Distortion({distortion:.15,wet:.25}),l=new Tone.AutoWah({baseFrequency:100,octaves:4,sensitivity:-10,Q:2,wet:.3});this.reverbNode=new Tone.Reverb({decay:30,wet:1.3*this.config.reverbAmount,preDelay:.2}),this.synth.connect(s),s.connect(h),h.connect(l),l.connect(r),r.connect(a),this.formantVoice.connect(i),i.connect(c),c.connect(a),this.whisperVoice.connect(this.whisperEnv),this.whisperEnv.connect(this.whisperGain),this.whisperGain.connect(i),this.droneVoice.connect(this.reverbNode),a.connect(this.reverbNode),this.reverbNode.connect(e),this.whisperVoice.start(),this.effects.push(this.formantVoice,this.whisperVoice,this.whisperEnv,this.whisperGain,this.droneVoice,s,n,i,o,a,r,c,h,l,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=3*t*1e3;s+=1.5*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"choir"});try{this.synth.triggerAttackRelease(e,6);const t=Math.random();if(t<.4&&setTimeout(()=>{this.isActive&&this.formantVoice.triggerAttackRelease(e,6*.7)},500+1e3*Math.random()),t<.6&&setTimeout(()=>{this.isActive&&this.whisperEnv.triggerAttackRelease(3)},2e3*Math.random()),t<.25){const t=e.slice(0,-1),s=parseInt(e.slice(-1));if(s>=3){const e=t+(s-2);setTimeout(()=>{this.isActive&&this.droneVoice.triggerAttackRelease(e,9)},2e3+3e3*Math.random())}}}catch(e){console.debug("Experimental choir playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},8e3)}},s)})}stop(){super.stop(),this.whisperVoice&&this.whisperVoice.stop()}}class SoftFluteInstrument extends BaseMelodyInstrument{constructor(){console.log("🎵 Creating Soft Flute instrument..."),super("Soft Flute"),console.log("🎵 Soft Flute constructor complete")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"triangle",detune:2},envelope:{attack:.3,decay:.5,sustain:.6,release:1.5},volume:-8});const s=new Tone.Noise("pink"),n=new Tone.Gain(.03),i=new Tone.Filter({frequency:2e3,type:"highpass",Q:.8}),o=new Tone.Filter({frequency:1800,type:"lowpass",Q:2}),a=new Tone.Vibrato({frequency:5,depth:.05,wet:.3}),r=new Tone.PingPongDelay({delayTime:"16n",feedback:.3,wet:.25}),c=new Tone.FeedbackDelay({delayTime:"8n.",feedback:.4,wet:.3}),h=new Tone.FeedbackDelay({delayTime:"4n",feedback:.25,wet:.2}),l=new Tone.PingPongDelay({delayTime:.25,feedback:.35,wet:.3}),u=new Tone.LFO({frequency:.2,min:.0625,max:.5,type:"sine"});u.connect(l.delayTime),u.start();const d=new Tone.Tremolo({frequency:8,depth:.15,wet:0}).start();this.reverbNode=new Tone.Reverb({decay:8,wet:this.config.reverbAmount,preDelay:.03,roomSize:.7}),this.synth.connect(o),o.connect(a),a.connect(d),d.connect(r),r.connect(c),c.connect(h),h.connect(l),l.connect(this.reverbNode),s.connect(i),i.connect(n),n.connect(this.reverbNode),this.reverbNode.connect(e),s.start(),this.effects.push(s,n,i,o,a,d,r,c,h,l,u,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){if(console.log("🎵 Soft Flute playMelodicSequence called with melody:",e),console.log("🎵 Soft Flute isActive:",this.isActive),!this.isActive)return void console.log("🎵 Soft Flute not active, skipping playback");const t=Math.random(),s=this.effects.find(e=>e instanceof Tone.PingPongDelay&&e.delayTime.value<.1),n=this.effects.find(e=>e instanceof Tone.FeedbackDelay&&e.delayTime.value<.3),i=this.effects.find(e=>e instanceof Tone.FeedbackDelay&&e.delayTime.value>.3),o=this.effects.find(e=>e instanceof Tone.PingPongDelay&&e.delayTime.value>.1);t<.3?(console.log("🎵 Flute: Simple delay echo mode"),s&&(s.wet.value=.1),n&&(n.wet.value=.6),i&&(i.wet.value=.4),o&&(o.wet.value=.1)):t<.5?(console.log("🎵 Flute: Ping-pong emphasis mode"),s&&(s.wet.value=.5),n&&(n.wet.value=.1),i&&(i.wet.value=.1),o&&(o.wet.value=.6)):t<.7?(console.log("🎵 Flute: Long ambient echo mode"),s&&(s.wet.value=.1),n&&(n.wet.value=.2),i&&(i.wet.value=.7),o&&(o.wet.value=.3)):(console.log("🎵 Flute: Complex layered echo mode"),s&&(s.wet.value=.25),n&&(n.wet.value=.3),i&&(i.wet.value=.2),o&&(o.wet.value=.3));let a,r;if(Math.random()<.2){a=.4,r=.8;const e=this.effects.find(e=>e instanceof Tone.Tremolo);e&&(e.wet.value=.3)}else{a=1.3,r=2.5;const e=this.effects.find(e=>e instanceof Tone.Tremolo);e&&(e.wet.value=0)}e.forEach((t,s)=>{let n=t;const i=Math.random();if(i<.15){const e=t.slice(0,-1),s=parseInt(t.slice(-1));s<6&&(n=e+(s+1))}else if(i<.25){const e=t.slice(0,-1),s=parseInt(t.slice(-1));s>2&&(n=e+(s-1))}let o=s*a*1e3;o+=.2*Math.random()*1e3,setTimeout(()=>{if(this.isActive){if(0===s){const t=this.effects.find(e=>e instanceof Tone.Noise);t&&"started"!==t.state&&(t.start(),console.log("🎵 Soft Flute: Started breath noise for sequence"),setTimeout(()=>{"started"===t.state&&(t.stop(),console.log("🎵 Soft Flute: Stopped breath noise"))},1e3*(e.length*a+r+2)))}"undefined"!=typeof activeNotes&&(activeNotes[n]?activeNotes[n].count++:activeNotes[n]={count:1,type:"flute"});try{this.synth.triggerAttackRelease(n,r),console.log(`🎵 Soft Flute: Playing note ${n}`)}catch(e){console.debug("Soft flute playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[n]&&(activeNotes[n].count--,activeNotes[n].count<=0&&delete activeNotes[n])},1e3*r+500)}},o)})}start(e,t){console.log("🎵 Soft Flute start() called"),super.start(e,t),console.log("🎵 Soft Flute isActive after start:",this.isActive)}stop(){console.log("🎵 Soft Flute stop() called"),super.stop();const e=this.effects.find(e=>e instanceof Tone.Noise);e&&"started"===e.state&&(e.stop(),console.log("🎵 Soft Flute: Stopped breath noise on stop()")),console.log("🎵 Soft Flute stopped")}}class VintageCelestaInstrument extends BaseMelodyInstrument{constructor(){super("Vintage Celesta")}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.FMSynth,{harmonicity:2,modulationIndex:6,oscillator:{type:"sine"},envelope:{attack:.02,decay:.8,sustain:.2,release:1.5},modulation:{type:"square"},modulationEnvelope:{attack:.01,decay:.6,sustain:.1,release:1},volume:-12});const s=new Tone.Filter({frequency:3e3,type:"lowpass",Q:1.5}),n=new Tone.Distortion({distortion:.1,wet:.3}),i=new Tone.PingPongDelay({delayTime:"8n",feedback:.4,wet:.35}),o=new Tone.FeedbackDelay({delayTime:"4n.",feedback:.3,wet:.25}),a=new Tone.FeedbackDelay({delayTime:"2n",feedback:.2,wet:.15}),r=new Tone.Chorus({frequency:.4,delayTime:3,depth:.3,wet:.4}).start();this.reverbNode=new Tone.Reverb({decay:15,wet:1.5*this.config.reverbAmount,preDelay:.08,roomSize:.9}),this.synth.connect(n),n.connect(s),s.connect(i),i.connect(o),o.connect(a),a.connect(r),r.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,o,a,r,this.reverbNode),this.synth.volume.value=this.config.volume}playMelodicSequence(e){e.forEach((e,t)=>{let s=.9*t*1e3;s+=.15*Math.random()*1e3,setTimeout(()=>{if(this.isActive){"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"celesta"});try{this.synth.triggerAttackRelease(e,1.2)}catch(e){console.debug("Vintage celesta playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[e]&&(activeNotes[e].count--,activeNotes[e].count<=0&&delete activeNotes[e])},2e3)}},s)})}}class RhythmicPianoInstrument extends BaseMelodyInstrument{constructor(){super("Rhythmic Piano"),this.rhythmicPatterns=[[1,0,1,0],[1,0,.5,0],[0,1,1,0],[1,.5,0,1],[1,0,1,.5],[.5,0,1,0],[1,1,0,0],[1,0,0,1],[0,.5,1,.5],[1,.5,1,.5],[1,.25,.5,0],[.5,.75,1,0],[1,.25,.75,0],[0,.25,.5,.75],[1,.5,.75,0],[.25,.5,1,.75],[1,.25,1,.25],[.5,.75,.5,.75],[1,0,.25,.75],[.25,.75,.25,.75]],this.currentBeat=0,this.currentPattern=[],this.currentPatternIndex=0,this.beatsPerPattern=4,this.beatInterval=null,this.tempo=100,this.recentNotes=[],this.maxRecentNotes=4,this.currentScale=[],this.preferredRange=[],this.phraseBeat=0,this.phraseLength=16,this.shouldChangePattern=!1}async initialize(e,t){super.initialize(e,t),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"triangle",partials:[1,.5,.25]},envelope:{attack:.01,decay:.3,sustain:.2,release:.8},volume:-2});const s=new Tone.Chorus({frequency:.3,delayTime:2,depth:.2,wet:.3}).start(),n=new Tone.PingPongDelay({delayTime:"4n",feedback:.3,wet:.5}),i=new Tone.Compressor({threshold:-18,ratio:3,attack:.003,release:.1});this.reverbNode=new Tone.Reverb({decay:8,wet:this.config.reverbAmount,preDelay:.02,roomSize:.6}),this.synth.connect(s),s.connect(n),n.connect(i),i.connect(this.reverbNode),this.reverbNode.connect(e),this.effects.push(s,n,i,this.reverbNode),this.synth.volume.value=this.config.volume}start(e,t){super.start(e,t),this.currentScale=e,this.setupPreferredRange(),this.selectNewPattern(),this.startRhythmicPlayback()}setupPreferredRange(){this.preferredRange=this.currentScale.filter(e=>{const t=parseInt(e.slice(-1));return t>=3&&t<=5}),this.preferredRange.length<5&&(this.preferredRange=this.currentScale)}selectNewPattern(){const e=this.currentPattern;do{const e=Math.floor(Math.random()*this.rhythmicPatterns.length);this.currentPattern=[...this.rhythmicPatterns[e]]}while(this.rhythmicPatterns.length>1&&JSON.stringify(this.currentPattern)===JSON.stringify(e));this.currentPatternIndex=0,console.debug(`Rhythmic Piano: New pattern selected: ${this.currentPattern}`)}startRhythmicPlayback(){if(!this.isActive)return;const e=60/this.tempo*1e3,t=()=>{if(!this.isActive)return;const s=this.currentPattern[this.currentPatternIndex];if(s>0){let t=0;.5===s?t=.5*e:.25===s?t=.25*e:.75===s&&(t=.75*e),setTimeout(()=>{this.isActive&&this.playRhythmicNote(s)},t)}if(this.currentPatternIndex=(this.currentPatternIndex+1)%this.currentPattern.length,this.currentBeat++,this.phraseBeat++,0===this.currentPatternIndex){const e=Math.floor(this.phraseBeat/this.beatsPerPattern);e>0&&e%(1+Math.floor(2*Math.random()))===0&&this.selectNewPattern()}this.phraseBeat>=this.phraseLength&&(this.phraseBeat=0,this.currentBeat=0,Math.random()<.3&&this.adjustTempo()),this.isActive&&(this.beatInterval=setTimeout(t,e))};this.beatInterval=setTimeout(t,500)}playRhythmicNote(e=1){const t=this.selectNextNote();if(t){this.recentNotes.push(t),this.recentNotes.length>this.maxRecentNotes&&this.recentNotes.shift(),"undefined"!=typeof activeNotes&&(activeNotes[t]?activeNotes[t].count++:activeNotes[t]={count:1,type:"rhythmic"});try{let s=.15+.2*Math.random(),n=.7+.3*Math.random();1===e?(s*=1.8,n*=1):.5===e?(s*=1.3,n*=.85):.25!==e&&.75!==e||(s*=.9,n*=.7),this.synth.triggerAttackRelease(t,s,void 0,n)}catch(e){console.debug("Rhythmic piano playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[t]&&(activeNotes[t].count--,activeNotes[t].count<=0&&delete activeNotes[t])},1e3)}}selectNextNote(){if(0===this.preferredRange.length)return null;const e=this.preferredRange.filter(e=>!this.recentNotes.includes(e));let t=e.length>2?e:this.preferredRange;if(this.recentNotes.length>0){const e=this.recentNotes[this.recentNotes.length-1],s=this.preferredRange.indexOf(e);if(-1!==s){const e=t.filter(e=>{const t=this.preferredRange.indexOf(e),n=Math.abs(t-s);return n>=2&&n<=4});e.length>0&&(t=e)}}return t[Math.floor(Math.random()*t.length)]}adjustTempo(){const e=this.tempo;this.tempo=Math.max(80,Math.min(120,this.tempo+5*(Math.random()-.5)*2)),Math.abs(this.tempo-e)>1&&console.debug(`Rhythmic Piano: Tempo adjusted from ${e} to ${this.tempo} BPM`)}stop(){super.stop(),this.beatInterval&&(clearTimeout(this.beatInterval),this.beatInterval=null),this.currentBeat=0,this.phraseBeat=0,this.currentPatternIndex=0,this.recentNotes=[],console.debug("Rhythmic Piano stopped")}startMelodicPhrases(){}playMelodicSequence(e){}dispose(){this.stop(),super.dispose()}}class AlgorithmicMelodyInstrument extends BaseMelodyInstrument{constructor(){super("Algorithmic Melody"),this.patterns={},this.sequencers=[],this.currentScale=[],this.scaleNotes=[],this.complexity=.6,this.polyrhythmAmount=.4,this.glitchAmount=.3,this.evolutionRate=.2,this.patternLengths=[16,12,9],this.evolutionTimeout=null,this.evolutionInterval=15e3,this.toneSequences=[]}async initialize(e,t){super.initialize(e,t),this.fmSynth=new Tone.FMSynth({harmonicity:3,modulationIndex:12,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.3,sustain:.4,release:.8},modulation:{type:"square"},modulationEnvelope:{attack:.2,decay:.1,sustain:.6,release:.5},volume:-8}),this.polySynth=new Tone.MonoSynth({oscillator:{type:"sawtooth"},envelope:{attack:.005,decay:.2,sustain:.1,release:.4},volume:-12}),this.glitchSynth=new Tone.MembraneSynth({pitchDecay:.05,octaves:6,oscillator:{type:"sine"},envelope:{attack:.001,decay:.3,sustain:.01,release:.8},volume:-15});const s=new Tone.Filter({frequency:2e3,type:"lowpass",rolloff:-12,Q:2}),n=new Tone.PingPongDelay({delayTime:"8n.",feedback:.4,wet:.3}),i=new Tone.Distortion({distortion:.15,wet:.2}),o=new Tone.Chorus({frequency:.3,delayTime:3,depth:.4,wet:.3}).start();this.reverbNode=new Tone.Reverb({decay:8,wet:this.config.reverbAmount,preDelay:.03,roomSize:.7}),this.fmSynth.connect(i),this.polySynth.connect(s),this.glitchSynth.connect(n),i.connect(o),s.connect(o),n.connect(o),o.connect(this.reverbNode),this.reverbNode.connect(e),this.synth=this.fmSynth,this.effects.push(this.polySynth,this.glitchSynth,s,n,i,o,this.reverbNode)}start(e,t){super.start(e,t),this.currentScale=e,this.extractScaleNotes(),this.generateAlgorithmicPatterns(),this.startSequencers(),this.scheduleEvolution()}extractScaleNotes(){this.scaleNotes=this.currentScale.map(e=>({name:e.slice(0,-1),octave:parseInt(e.slice(-1)),fullNote:e}))}generateAlgorithmicPatterns(){this.patterns={primary:this.generateMelodicPattern(this.patternLengths[0],this.complexity),secondary:this.generatePolyrhythmicPattern(this.patternLengths[1],.7*this.complexity),tertiary:this.generatePolyrhythmicPattern(this.patternLengths[2],.5*this.complexity),glitch:this.generateGlitchPattern(32,this.glitchAmount)},console.debug("Algorithmic patterns generated:",{primaryLength:this.patterns.primary.length,secondaryLength:this.patterns.secondary.length,tertiaryLength:this.patterns.tertiary.length})}generateMelodicPattern(e,t){const s=[];let n=Math.floor(this.scaleNotes.length/2);for(let i=0;i<e;i++){if(Math.random()<t&&this.scaleNotes.length>0){const e=Math.floor(7*Math.random())-3;let t=Math.max(0,Math.min(this.scaleNotes.length-1,n+e)),i=this.scaleNotes[t].octave;Math.random()<.2&&(i+=Math.random()<.5?-1:1,i=Math.max(2,Math.min(6,i))),s.push({trigger:!0,note:this.scaleNotes[t].name+i,velocity:.4+.5*Math.random(),duration:this.getAlgorithmicDuration(),probability:.6+.3*Math.random()}),n=t}else s.push({trigger:!1,note:null,velocity:0,duration:0,probability:0})}return s}generatePolyrhythmicPattern(e,t){const s=[];for(let n=0;n<e;n++)if(Math.random()<t&&this.scaleNotes.length>0){const e=this.scaleNotes[Math.floor(Math.random()*this.scaleNotes.length)];let t=e.octave;Math.random()<.4&&(t=Math.min(6,t+1)),s.push({trigger:!0,note:e.name+t,velocity:.2+.4*Math.random(),duration:"16n",probability:.5+.4*Math.random()})}else s.push({trigger:!1,note:null,velocity:0,duration:0,probability:0});return s}generateGlitchPattern(e,t){const s=[];for(let n=0;n<e;n++)if(Math.random()<t){const e=220*Math.pow(2,3*Math.random());s.push({trigger:!0,frequency:e,velocity:.3+.4*Math.random(),duration:.05+.1*Math.random(),probability:.4+.5*Math.random()})}else s.push({trigger:!1,frequency:0,velocity:0,duration:0,probability:0});return s}getAlgorithmicDuration(){const e=["32n","16n","16n.","8n","8n.","4n"],t=[.1,.3,.2,.2,.15,.05],s=Math.random();let n=0;for(let i=0;i<t.length;i++)if(n+=t[i],s<n)return e[i];return"16n"}startSequencers(){if(!this.isActive)return;const e=new Tone.Sequence((e,t)=>{const s=this.patterns.primary[t%this.patterns.primary.length];s.trigger&&Math.random()<s.probability&&this.triggerMelodicNote(this.fmSynth,s,e)},Array.from({length:this.patterns.primary.length},(e,t)=>t),"8n"),t=new Tone.Sequence((e,t)=>{const s=this.patterns.secondary[t%this.patterns.secondary.length];s.trigger&&Math.random()<s.probability&&this.triggerMelodicNote(this.polySynth,s,e)},Array.from({length:this.patterns.secondary.length},(e,t)=>t),"16n"),s=new Tone.Sequence((e,t)=>{const s=this.patterns.tertiary[t%this.patterns.tertiary.length];s.trigger&&Math.random()<s.probability&&this.triggerMelodicNote(this.polySynth,s,e)},Array.from({length:this.patterns.tertiary.length},(e,t)=>t),"8n."),n=new Tone.Sequence((e,t)=>{const s=this.patterns.glitch[t%this.patterns.glitch.length];s.trigger&&Math.random()<s.probability&&this.glitchSynth.triggerAttackRelease(s.frequency,s.duration,e,s.velocity)},Array.from({length:this.patterns.glitch.length},(e,t)=>t),"32n");this.toneSequences=[e,t,s,n],this.toneSequences.forEach(e=>{e.start()}),console.debug("Algorithmic sequencers started")}triggerMelodicNote(e,t,s){if(t.note){"undefined"!=typeof activeNotes&&(activeNotes[t.note]?activeNotes[t.note].count++:activeNotes[t.note]={count:1,type:"algorithmic"});try{e.triggerAttackRelease(t.note,t.duration,s,t.velocity)}catch(e){console.debug("Algorithmic note playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[t.note]&&(activeNotes[t.note].count--,activeNotes[t.note].count<=0&&delete activeNotes[t.note])},1e3)}}scheduleEvolution(){this.isActive&&(this.evolutionTimeout=setTimeout(()=>{this.isActive&&(this.evolvePatterns(),this.scheduleEvolution())},this.evolutionInterval))}evolvePatterns(){console.debug("Evolving algorithmic patterns...");for(let e=0;e<this.patterns.primary.length;e++)if(Math.random()<this.evolutionRate)if(Math.random()<.7){if(this.patterns.primary[e].trigger){const t=this.patterns.primary[e],s=this.scaleNotes.findIndex(e=>e.fullNote===t.note);if(-1!==s){const e=Math.floor(5*Math.random())-2,n=Math.max(0,Math.min(this.scaleNotes.length-1,s+e));t.note=this.scaleNotes[n].fullNote}}}else if(this.patterns.primary[e].trigger=!this.patterns.primary[e].trigger,this.patterns.primary[e].trigger){const t=this.scaleNotes[Math.floor(Math.random()*this.scaleNotes.length)];this.patterns.primary[e].note=t.fullNote,this.patterns.primary[e].velocity=.4+.5*Math.random(),this.patterns.primary[e].duration=this.getAlgorithmicDuration(),this.patterns.primary[e].probability=.6+.3*Math.random()}this.patterns.glitch=this.generateGlitchPattern(32,this.glitchAmount),console.debug("Pattern evolution complete")}stop(){super.stop(),this.toneSequences.forEach(e=>{e&&(e.stop(),e.dispose())}),this.toneSequences=[],this.evolutionTimeout&&(clearTimeout(this.evolutionTimeout),this.evolutionTimeout=null),console.debug("Algorithmic melody stopped")}startMelodicPhrases(){}playMelodicSequence(e){}dispose(){this.stop(),super.dispose()}setComplexity(e){this.complexity=Math.max(.1,Math.min(1,e)),console.debug(`Algorithmic complexity set to: ${this.complexity}`)}setPolyrhythmAmount(e){this.polyrhythmAmount=Math.max(0,Math.min(1,e)),console.debug(`Polyrhythm amount set to: ${this.polyrhythmAmount}`)}setGlitchAmount(e){this.glitchAmount=Math.max(0,Math.min(1,e)),console.debug(`Glitch amount set to: ${this.glitchAmount}`)}setEvolutionRate(e){this.evolutionRate=Math.max(0,Math.min(1,e)),console.debug(`Evolution rate set to: ${this.evolutionRate}`)}triggerEvolution(){this.isActive&&this.evolvePatterns()}}class DeepBassMelodicInstrument extends BaseMelodyInstrument{constructor(){super("Deep Bass Melodic"),this.bassVariants=["subBass","resonantBass","fmBass","uprightBass","synthBass"],this.currentVariant="subBass",this.variantChangeInterval=null}async initialize(e,t){super.initialize(e,t),this.createBassSynths(),this.createBassEffectsChain(e),this.selectBassVariant("subBass"),this.scheduleVariantChanges()}createBassSynths(){this.subBassSynth=new Tone.MonoSynth({oscillator:{type:"sine",detune:0},filter:{type:"lowpass",frequency:150,Q:1},envelope:{attack:.3,decay:1.5,sustain:.8,release:2.5},volume:5}),this.resonantBassSynth=new Tone.MonoSynth({oscillator:{type:"sawtooth",detune:-5},filter:{type:"lowpass",frequency:200,Q:8},envelope:{attack:.1,decay:.8,sustain:.6,release:1.8},volume:2}),this.fmBassSynth=new Tone.FMSynth({harmonicity:.5,modulationIndex:15,oscillator:{type:"sine"},envelope:{attack:.2,decay:1.2,sustain:.7,release:2},modulation:{type:"triangle"},modulationEnvelope:{attack:.1,decay:.8,sustain:.4,release:1.5},volume:0}),this.uprightBassSynth=new Tone.PluckSynth({attackNoise:2,dampening:2e3,resonance:.9,volume:8}),this.synthBassSynth=new Tone.MonoSynth({oscillator:{type:"triangle",detune:3},filter:{type:"lowpass",frequency:300,Q:4},envelope:{attack:.05,decay:.3,sustain:.9,release:1},volume:3}),this.bassSynths={subBass:this.subBassSynth,resonantBass:this.resonantBassSynth,fmBass:this.fmBassSynth,uprightBass:this.uprightBassSynth,synthBass:this.synthBassSynth}}createBassEffectsChain(e){this.subHarmonic=new Tone.Gain(.3),this.bassDistortion=new Tone.Distortion({distortion:.1,wet:.4}),this.bassFilter1=new Tone.Filter({type:"highpass",frequency:30,Q:.5}),this.bassFilter2=new Tone.Filter({type:"lowpass",frequency:400,Q:2}),this.bassCompressor=new Tone.Compressor({threshold:-15,ratio:6,attack:.005,release:.1}),this.bassChorus=new Tone.Chorus({frequency:.3,delayTime:4,depth:.2,wet:.25}).start(),this.bassReverb=new Tone.Reverb({decay:8,wet:this.config.reverbAmount||.4,preDelay:.05,roomSize:.8}),this.bassFilter1.connect(this.bassDistortion),this.bassDistortion.connect(this.bassFilter2),this.bassFilter2.connect(this.bassCompressor),this.bassCompressor.connect(this.bassChorus),this.bassChorus.connect(this.bassReverb),this.bassReverb.connect(e),this.effects.push(this.bassDistortion,this.bassFilter1,this.bassFilter2,this.bassCompressor,this.bassChorus,this.bassReverb)}selectBassVariant(e){console.debug(`Switching to bass variant: ${e}`),Object.values(this.bassSynths).forEach(e=>{try{e.disconnect()}catch(e){}});const t=this.bassSynths[e];t&&(t.connect(this.bassFilter1),this.synth=t,this.currentVariant=e,this.applyVariantSettings(e))}applyVariantSettings(e){switch(e){case"subBass":this.bassFilter2.frequency.value=120,this.bassFilter2.Q.value=1,this.bassDistortion.wet.value=.2;break;case"resonantBass":this.bassFilter2.frequency.value=250,this.bassFilter2.Q.value=6,this.bassDistortion.wet.value=.4;break;case"fmBass":this.bassFilter2.frequency.value=300,this.bassFilter2.Q.value=3,this.bassDistortion.wet.value=.3;break;case"uprightBass":this.bassFilter2.frequency.value=400,this.bassFilter2.Q.value=2,this.bassDistortion.wet.value=.5;break;case"synthBass":this.bassFilter2.frequency.value=350,this.bassFilter2.Q.value=4,this.bassDistortion.wet.value=.35}}scheduleVariantChanges(){this.variantChangeInterval&&clearTimeout(this.variantChangeInterval);const e=1e3*(20+20*Math.random());this.variantChangeInterval=setTimeout(()=>{if(this.isActive){this.bassVariants.indexOf(this.currentVariant);let e;do{e=this.bassVariants[Math.floor(Math.random()*this.bassVariants.length)]}while(e===this.currentVariant&&this.bassVariants.length>1);this.selectBassVariant(e),this.scheduleVariantChanges()}},e)}playMelodicSequence(e){Math.random();const t=1.8+.8*Math.random();this.createBassifiedMelody(e).forEach((e,s)=>{let n=s*t*1e3;n+=500*(Math.random()-.5),setTimeout(()=>{if(!this.isActive)return;const{note:t,duration:s,velocity:n}=e;"undefined"!=typeof activeNotes&&(activeNotes[t]?activeNotes[t].count++:activeNotes[t]={count:1,type:"bass"});try{this.triggerBassByVariant(t,s,n)}catch(e){console.debug("Deep bass playback error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[t]&&(activeNotes[t].count--,activeNotes[t].count<=0&&delete activeNotes[t])},1e3*s+1e3)},n)})}createBassifiedMelody(e){return e.map(e=>{const t=e.slice(0,-1),s=parseInt(e.slice(-1));let n;n=s>=5?2:s>=4?Math.random()<.7?2:3:s<=3?s:3;const i=t+n;let o=2.5,a=.8;switch(this.currentVariant){case"subBass":o=3.5+2*Math.random(),a=.9+.1*Math.random();break;case"uprightBass":o=1.5+1*Math.random(),a=.7+.3*Math.random();break;case"resonantBass":o=2+1.5*Math.random(),a=.8+.2*Math.random();break;case"fmBass":o=2.5+1.5*Math.random(),a=.75+.25*Math.random();break;case"synthBass":o=1.8+1.2*Math.random(),a=.8+.2*Math.random()}return{note:i,duration:o,velocity:a}})}triggerBassByVariant(e,t,s){if("uprightBass"===this.currentVariant)this.synth.triggerAttackRelease(e,"4n",void 0,s);else this.synth.triggerAttackRelease(e,t,void 0,s)}stop(){super.stop(),this.variantChangeInterval&&(clearTimeout(this.variantChangeInterval),this.variantChangeInterval=null)}dispose(){this.variantChangeInterval&&(clearTimeout(this.variantChangeInterval),this.variantChangeInterval=null),Object.values(this.bassSynths).forEach(e=>{if(e&&e.dispose)try{e.dispose()}catch(e){console.debug("Error disposing bass synth:",e)}}),super.dispose()}changeBassVariant(e){this.bassVariants.includes(e)&&this.selectBassVariant(e)}getCurrentVariant(){return this.currentVariant}getAvailableVariants(){return this.bassVariants.slice()}}class ArpeggiatorInstrument extends BaseMelodyInstrument{constructor(){super("Arpeggiator"),this.sequence=null,this.chordChangeTimeout=null,this.currentChordIndex=0,this.delay=null,this.presetMode=!1,this.lockSynthesis=!1,this.presetConfig=null,this.settings={pattern:"upDown",speed:4,octaves:2,chordProgression:"simple",synthesis:"piano",noteLength:.8,chordChangeRate:8,arpeggioVolume:-8},this.patterns=["up","down","upDown","downUp","random","cascade","bounce"],this.chordProgressions=["simple","jazzy","mysterious","floating","epic"],this.synthesisTypes=["piano","harp","pad","pluck"],this.speeds=["2n","4n","4n.","8n","8n.","16n","16n."],this.evolutionTimeout=null,this.evolutionInterval=15e4,console.log("🎹 Arpeggiator instrument created")}async initialize(e,t){super.initialize(e,t),console.log("🎹 Initializing arpeggiator instrument..."),this.delay=new Tone.PingPongDelay({delayTime:"8n",feedback:.2,wet:.15}),this.reverbNode=new Tone.Reverb({decay:8,wet:this.config.reverbAmount,preDelay:.03}),this.delay.connect(this.reverbNode),this.reverbNode.connect(e),this.createArpeggiatorSynth(),this.randomizeSettings(),this.effects.push(this.delay,this.reverbNode),console.log("🎹 Arpeggiator initialized with random settings")}createArpeggiatorSynth(){this.synth&&this.synth.dispose();try{switch(this.settings.synthesis){case"piano":this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"triangle"},envelope:{attack:.02,decay:.3,sustain:.3,release:1},volume:this.settings.arpeggioVolume});break;case"bells":this.synth=new Tone.MetalSynth({harmonicity:2.1,resonance:2400,modulationIndex:15,envelope:{attack:.001,decay:1.5,sustain:.2,release:3},volume:this.settings.arpeggioVolume-15});break;case"harp":this.synth=new Tone.PolySynth(Tone.FMSynth,{harmonicity:1.5,modulationIndex:10,oscillator:{type:"sine"},envelope:{attack:.01,decay:.7,sustain:.1,release:1},volume:this.settings.arpeggioVolume});break;case"pad":this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"sine"},envelope:{attack:2,decay:1,sustain:.8,release:4},volume:this.settings.arpeggioVolume});break;case"pluck":this.synth=new Tone.PluckSynth({attackNoise:1,dampening:4e3,resonance:.7,volume:this.settings.arpeggioVolume+5});break;default:console.warn(`🎹 Unknown synthesis type: ${this.settings.synthesis}, falling back to piano`),this.settings.synthesis="piano",this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"triangle"},envelope:{attack:.02,decay:.3,sustain:.3,release:1},volume:this.settings.arpeggioVolume})}this.synth&&this.delay&&this.synth.connect(this.delay)}catch(e){console.error("🎹 Error creating arpeggiator synth:",e),this.synth=new Tone.PolySynth(Tone.Synth,{oscillator:{type:"triangle"},envelope:{attack:.02,decay:.3,sustain:.3,release:1},volume:this.settings.arpeggioVolume}),this.synth&&this.delay&&this.synth.connect(this.delay)}}randomizeSettings(){this.settings.pattern=this.patterns[Math.floor(Math.random()*this.patterns.length)],this.settings.chordProgression=this.chordProgressions[Math.floor(Math.random()*this.chordProgressions.length)],this.settings.synthesis=this.synthesisTypes[Math.floor(Math.random()*this.synthesisTypes.length)],this.settings.speed=Math.floor(7*Math.random())+1,this.settings.octaves=Math.floor(3*Math.random())+1,this.settings.noteLength=.4+1.2*Math.random(),this.settings.chordChangeRate=6+8*Math.random(),console.log("🎹 Randomized arpeggiator settings:",this.settings)}getChordProgressions(){if(!this.currentScale||0===this.currentScale.length)return{simple:[["C4","E4","G4"],["G4","B4","D5"],["A4","C5","E5"],["F4","A4","C5"]],jazzy:[["D4","F4","A4"],["G4","B4","D5"],["C4","E4","G4"],["A4","C5","E5"]],mysterious:[["C4","Eb4","G4"],["Bb3","D4","F4"],["Ab3","C4","Eb4"],["Bb3","D4","F4"]],floating:[["C4","E4","G4"],["D4","F4","A4"],["E4","G4","B4"],["D4","F4","A4"]],epic:[["A4","C5","E5"],["F4","A4","C5"],["C4","E4","G4"],["G4","B4","D5"]]};const e=this.currentScale,t=this.buildChordsFromScale(e);return{simple:[t[0],t[4],t[5],t[3]],jazzy:[t[1],t[4],t[0],t[5]],mysterious:[t[0],t[6],t[5],t[6]],floating:[t[0],t[1],t[2],t[1]],epic:[t[5],t[3],t[0],t[4]]}}buildChordsFromScale(e){const t=[],s=e.slice(0,7);for(let e=0;e<7;e++){const n=s[e],i=s[(e+2)%7],o=s[(e+4)%7];t.push([n,i,o])}return t}generateArpeggioPattern(e){let t=[...e];for(let s=1;s<this.settings.octaves;s++)e.forEach(e=>{const n=e.slice(0,-1),i=parseInt(e.slice(-1))+s;i<=6&&t.push(n+i)});switch(this.settings.pattern){case"up":return t.sort((e,t)=>this.noteToMidi(e)-this.noteToMidi(t));case"down":return t.sort((e,t)=>this.noteToMidi(t)-this.noteToMidi(e));case"upDown":const e=t.sort((e,t)=>this.noteToMidi(e)-this.noteToMidi(t)),s=[...e].reverse().slice(1,-1);return[...e,...s];case"downUp":const n=t.sort((e,t)=>this.noteToMidi(t)-this.noteToMidi(e)),i=[...n].reverse().slice(1,-1);return[...n,...i];case"random":return this.shuffleArray([...t]);case"cascade":const o={};t.forEach(e=>{const t=parseInt(e.slice(-1));o[t]||(o[t]=[]),o[t].push(e)});let a=[];return Object.keys(o).sort().forEach(e=>{a.push(...o[e].sort((e,t)=>this.noteToMidi(e)-this.noteToMidi(t)))}),a;case"bounce":const r=t.sort((e,t)=>this.noteToMidi(e)-this.noteToMidi(t));let c=[];for(let e=0;e<r.length;e++)e%2==0?c.push(r[Math.floor(e/2)]):c.push(r[r.length-1-Math.floor(e/2)]);return c;default:return t}}noteToMidi(e){return 12*(parseInt(e.slice(-1))+1)+{C:0,"C#":1,Db:1,D:2,"D#":3,Eb:3,E:4,F:5,"F#":6,Gb:6,G:7,"G#":8,Ab:8,A:9,"A#":10,Bb:10,B:11}[e.slice(0,-1)]}shuffleArray(e){for(let t=e.length-1;t>0;t--){const s=Math.floor(Math.random()*(t+1));[e[t],e[s]]=[e[s],e[t]]}return e}start(e,t){super.start(e,t),console.log("🎹 Starting arpeggiator with scale:",e),"started"!==Tone.Transport.state&&Tone.Transport.start(),this.startArpeggiatorSequence(),this.scheduleChordChanges(),this.scheduleEvolution()}startArpeggiatorSequence(){if(!this.isActive)return;const e=this.getChordProgressions()[this.settings.chordProgression][this.currentChordIndex],t=this.generateArpeggioPattern(e);console.log(`🎹 Starting arpeggio sequence: ${this.settings.pattern} pattern with ${t.length} notes`),this.sequence&&(this.sequence.stop(),this.sequence.dispose()),this.sequence=new Tone.Sequence((e,t)=>{if(this.isActive&&t&&this.synth){"undefined"!=typeof activeNotes&&(activeNotes[t]?activeNotes[t].count++:activeNotes[t]={count:1,type:"arpeggio"});try{this.synth.triggerAttackRelease(t,this.settings.noteLength,e)}catch(e){console.warn("🎹 Arpeggiator note trigger error:",e.message)}setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[t]&&(activeNotes[t].count--,activeNotes[t].count<=0&&delete activeNotes[t])},1e3*this.settings.noteLength+500)}},t,this.speeds[this.settings.speed-1]),this.sequence.loop=!0,this.sequence.start(0)}scheduleChordChanges(){this.chordChangeTimeout&&clearTimeout(this.chordChangeTimeout),this.chordChangeTimeout=setTimeout(()=>{if(this.isActive){const e=this.getChordProgressions()[this.settings.chordProgression];this.currentChordIndex=(this.currentChordIndex+1)%e.length,console.log(`🎹 Chord change to index ${this.currentChordIndex}`),this.startArpeggiatorSequence(),this.scheduleChordChanges()}},1e3*this.settings.chordChangeRate)}scheduleEvolution(){this.evolutionTimeout&&clearTimeout(this.evolutionTimeout),this.evolutionTimeout=setTimeout(()=>{this.isActive&&(console.log("🎹 Evolving arpeggiator settings..."),this.evolveSettings(),this.scheduleEvolution())},this.evolutionInterval)}evolveSettings(){const e=Math.floor(2*Math.random())+1,t=["pattern","speed","octaves","noteLength"];console.log(`🎹 Arp pre-evolve settings were: ${this.settings.pattern} and ${this.settings.speed}`);for(let s=0;s<e;s++){switch(t[Math.floor(Math.random()*t.length)]){case"pattern":const e=this.settings.pattern;do{this.settings.pattern=this.patterns[Math.floor(Math.random()*this.patterns.length)]}while(this.settings.pattern===e);break;case"speed":this.settings.speed=Math.max(1,Math.min(7,this.settings.speed+(Math.random()<.5?-1:1)));break;case"octaves":this.settings.octaves=Math.max(1,Math.min(3,this.settings.octaves+(Math.random()<.5?-1:1)));break;case"noteLength":this.settings.noteLength=Math.max(.2,Math.min(2,this.settings.noteLength+.4*(Math.random()-.5)))}}if(console.log(`🎹 Arp pre-evolve settings are now : ${this.settings.pattern} and ${this.settings.speed}`),!this.lockSynthesis&&Math.random()<.3){const e=this.settings.synthesis;do{this.settings.synthesis=this.synthesisTypes[Math.floor(Math.random()*this.synthesisTypes.length)]}while(this.settings.synthesis===e);try{this.createArpeggiatorSynth(),console.log(`🎹 Synthesis evolved to: ${this.settings.synthesis}`)}catch(t){console.warn(`🎹 Failed to evolve to ${this.settings.synthesis}, reverting to ${e}:`,t.message),this.settings.synthesis=e,this.createArpeggiatorSynth()}}else this.lockSynthesis&&console.log(`🎹 Synthesis locked at: ${this.settings.synthesis} (preset mode)`);try{this.startArpeggiatorSequence(),console.log("🎹 Settings evolved:",this.settings)}catch(e){console.error("🎹 Error restarting sequence after evolution:",e)}}applyPresetConfiguration(e){console.log("🎹 Applying arpeggiator preset configuration:",e),this.presetMode=!0,this.lockSynthesis=e.lockSynthesis||!1,this.presetConfig={...e},Object.assign(this.settings,e),e.synthesis&&e.synthesis!==this.settings.synthesis&&this.createArpeggiatorSynth(),this.isActive&&this.startArpeggiatorSequence(),console.log("🎹 Preset applied. Synthesis locked:",this.lockSynthesis)}exitPresetMode(){console.log("🎹 Exiting arpeggiator preset mode"),this.presetMode=!1,this.lockSynthesis=!1,this.presetConfig=null,this.randomizeSettings(),this.createArpeggiatorSynth(),this.isActive&&this.startArpeggiatorSequence()}stop(){super.stop(),console.log("🎹 Stopping arpeggiator..."),this.sequence&&(this.sequence.stop(),this.sequence.dispose(),this.sequence=null),this.chordChangeTimeout&&(clearTimeout(this.chordChangeTimeout),this.chordChangeTimeout=null),this.evolutionTimeout&&(clearTimeout(this.evolutionTimeout),this.evolutionTimeout=null),this.currentChordIndex=0}dispose(){this.stop(),this.delay&&this.delay.dispose(),super.dispose()}startMelodicPhrases(){}playMelodicSequence(e){}getCurrentSettings(){return{pattern:this.settings.pattern,synthesis:this.settings.synthesis,chordProgression:this.settings.chordProgression,speed:this.speeds[this.settings.speed-1],octaves:this.settings.octaves,noteLength:this.settings.noteLength.toFixed(1)+"s",chordChangeRate:this.settings.chordChangeRate.toFixed(1)+"s"}}}class MelodyInstrumentRegistry{constructor(){this.instruments=new Map,this.registerDefaultInstruments()}registerDefaultInstruments(){this.register("piano",PianoInstrument),this.register("rhythmic-piano",RhythmicPianoInstrument),this.register("glitch-electronic",GlitchElectronicInstrument),this.register("sampled-piano",SampledPianoInstrument),this.register("marimba",MarimbaInstrument),this.register("harp",HarpInstrument),this.register("music-box",MusicBoxInstrument),this.register("crystal-bells",CrystalBellsInstrument),this.register("warm-strings",WarmStringsInstrument),this.register("ethereal-choir",EtherealChoirInstrument),this.register("wind-chimes",WindChimesInstrument),this.register("glass-harmonics",GlassHarmonicsInstrument),this.register("soft-flute",SoftFluteInstrument),this.register("vintage-celesta",VintageCelestaInstrument),this.register("algorithmic-melody",AlgorithmicMelodyInstrument),this.register("deep-bass-melodic",DeepBassMelodicInstrument),this.register("arpeggiator",ArpeggiatorInstrument)}register(e,t){this.instruments.set(e,t)}create(e,t={}){const s=this.instruments.get(e);if(!s)throw new Error(`Melody instrument '${e}' not found in registry`);return new s(t)}getAvailableInstruments(){return Array.from(this.instruments.keys())}getInstrumentInfo(e){const t=this.instruments.get(e);if(!t)return null;return{key:e,name:(new t).name}}}class MelodyManager{constructor(){this.registry=new MelodyInstrumentRegistry,this.currentInstrument=null,this.isEnabled=!1,this.randomInterval=null}async setInstrument(e,t={}){return this.currentInstrument&&this.currentInstrument.dispose(),this.currentInstrument=this.registry.create(e,t),this.currentInstrument}async start(e,t){this.currentInstrument&&this.isEnabled&&(this.currentInstrument.synth||await this.currentInstrument.initialize(masterVolume,reverb),this.currentInstrument.start(e,t))}stop(){this.currentInstrument&&this.currentInstrument.stop(),this.randomInterval&&(clearInterval(this.randomInterval),this.randomInterval=null)}setEnabled(e){this.isEnabled=e,e||this.stop()}updateReverbAmount(e){this.currentInstrument&&this.currentInstrument.updateReverbAmount(e)}getAvailableInstruments(){return this.registry.getAvailableInstruments().map(e=>this.registry.getInstrumentInfo(e))}startRandomCycle(){this.randomInterval&&clearInterval(this.randomInterval);const e=60*("undefined"!=typeof randomIntervalSlider?parseInt(randomIntervalSlider.value):10)*1e3;this.randomInterval=setInterval(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof melodicInstrumentSelect&&"random"===melodicInstrumentSelect.value?this.changeToRandomInstrument():(clearInterval(this.randomInterval),this.randomInterval=null)},e)}changeToRandomInstrument(){const e=this.registry.getAvailableInstruments();let t,s="";this.currentInstrument&&(s=this.currentInstrument.instrumentType||"");do{t=e[Math.floor(Math.random()*e.length)]}while(t===s&&e.length>1);if(console.debug(`Random instrument change: ${s} → ${t}`),this.setInstrument(t,{volume:-5,reverbAmount:"undefined"!=typeof melodicReverbSlider?parseFloat(melodicReverbSlider.value):.5}),"undefined"!=typeof isPlaying&&isPlaying){const e="undefined"!=typeof moodSelect&&"random"===moodSelect.value?"undefined"!=typeof currentActiveMood?currentActiveMood:"calm":"undefined"!=typeof moodSelect?moodSelect.value:"calm",t="undefined"!=typeof scales?scales[e]:[],s="undefined"!=typeof melodicPatterns?melodicPatterns[e]:[];this.start(t,s)}}dispose(){this.stop(),this.currentInstrument&&(this.currentInstrument.dispose(),this.currentInstrument=null)}}
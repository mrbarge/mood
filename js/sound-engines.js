class BaseSoundEngine{constructor(e,t={}){this.name=e,this.config={density:5,reverbAmount:.5,...t},this.synths=[],this.effects=[],this.lfos=[],this.isActive=!1,this.scheduledCallbacks=[],this.currentScale=[]}async initialize(e,t,n,s){this.masterVolume=e,this.globalReverb=t,this.globalDelay=n,this.globalFilter=s}setScale(e){this.currentScale=e,this.isActive&&this.onScaleChange(e)}onScaleChange(e){}start(){this.isActive||(this.isActive=!0,this.startGenerativePattern())}stop(){this.isActive=!1,this.scheduledCallbacks.forEach(e=>clearTimeout(e)),this.scheduledCallbacks=[],this.synths.forEach(e=>{e.timeout&&(clearTimeout(e.timeout),e.timeout=null),e.releaseAll&&e.releaseAll(),e.triggerRelease&&e.triggerRelease()}),setTimeout(()=>{this.dispose()},1e3)}dispose(){this.lfos.forEach(e=>{if(e&&e.dispose)try{e.dispose()}catch(e){console.debug("Error disposing LFO:",e)}}),this.lfos=[],[...this.synths,...this.effects].forEach(e=>{if(e&&e.dispose)try{e.dispose()}catch(e){console.debug("Error disposing audio node:",e)}}),this.synths=[],this.effects=[]}startGenerativePattern(){throw new Error("startGenerativePattern() must be implemented by subclass")}getRandomNote(){return 0===this.currentScale.length?"C4":this.currentScale[Math.floor(Math.random()*this.currentScale.length)]}getRandomChord(e=3){const t=[];for(let n=0;n<e;n++)t.push(this.getRandomNote());return t}scheduleNext(e,t,n){if(!this.isActive)return;const s=Math.random()*(n-t)+t,i=setTimeout(()=>{this.isActive&&(e(),this.scheduledCallbacks=this.scheduledCallbacks.filter(e=>e!==i))},s);return this.scheduledCallbacks.push(i),i}updateDensity(e){this.config.density=e}updateReverb(e){this.config.reverbAmount=e,this.effects.forEach(t=>{!t.wet||void 0===t.decay&&void 0===t.roomSize||(t.wet.value=e)})}}class StandardSoundEngine extends BaseSoundEngine{constructor(){super("Standard Ambient")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.pad1=SynthFactory.createPad("sine","SLOW_ETHEREAL",-8),this.pad2=SynthFactory.createPad("sine","SLOW_ETHEREAL",-10),this.chimes=SynthFactory.createFMSynth(8,2,"FAST_TRANSIENT",-15),this.bass=SynthFactory.createMonoSynth("sine","LONG_SUSTAIN",-5),[this.pad1,this.pad2,this.chimes,this.bass].forEach(e=>{e.connect(this.globalFilter),e.timeout=null}),this.synths.push(this.pad1,this.pad2,this.chimes,this.bass)}startGenerativePattern(){this.schedulePadNotes(this.pad1),setTimeout(()=>{this.isActive&&this.schedulePadNotes(this.pad2)},5e3),this.scheduleChimes(this.chimes),this.scheduleBassNotes(this.bass)}schedulePadNotes(e){const t=()=>{if(!this.isActive)return;e.timeout&&(clearTimeout(e.timeout),e.timeout=null);const n=Math.floor(3*Math.random())+1,s=[];for(let e=0;e<n;e++){const e=this.getRandomNote();s.push(e),"undefined"!=typeof activeNotes&&(activeNotes[e]?activeNotes[e].count++:activeNotes[e]={count:1,type:"pad"})}s.length>0&&e.triggerAttackRelease(s,10*Math.random()+8);const i=1e3*(11-this.config.density+3*Math.random());this.isActive&&(e.timeout=setTimeout(t,i))};t()}scheduleChimes(e){const t=()=>{if(!this.isActive)return;if(e.timeout&&(clearTimeout(e.timeout),e.timeout=null),Math.random()>.25){const t=this.currentScale.filter(e=>parseInt(e.slice(-1))>=4);if(t.length>0){const n=t[Math.floor(Math.random()*t.length)];"undefined"!=typeof activeNotes&&(activeNotes[n]?activeNotes[n].count++:activeNotes[n]={count:1,type:"chime"}),e.triggerAttackRelease(n,"16n"),setTimeout(()=>{"undefined"!=typeof isPlaying&&isPlaying&&"undefined"!=typeof activeNotes&&activeNotes[n]&&(activeNotes[n].count--,activeNotes[n].count<=0&&delete activeNotes[n])},2e3)}}const n=1e3*(1.5*(11-this.config.density)+4*Math.random());this.isActive&&(e.timeout=setTimeout(t,n))};this.isActive&&(e.timeout=setTimeout(t,8e3))}scheduleBassNotes(e){const t=()=>{if(!this.isActive)return;e.timeout&&(clearTimeout(e.timeout),e.timeout=null);const n=this.currentScale.filter(e=>parseInt(e.slice(-1))<=3);if(n.length>0){const t=n[Math.floor(Math.random()*n.length)];"undefined"!=typeof activeNotes&&(activeNotes[t]?activeNotes[t].count++:activeNotes[t]={count:1,type:"bass"}),e.triggerAttackRelease(t,6*Math.random()+4)}const s=1e3*(10*Math.random()+10);this.isActive&&(e.timeout=setTimeout(t,s))};this.isActive&&(e.timeout=setTimeout(t,2e3))}}class CathedralEtherealEngine extends BaseSoundEngine{constructor(){super("Cathedral Ethereal")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.cathedralPad=SynthFactory.createPad("sine","CATHEDRAL");const i=new AudioChainBuilder(this.cathedralPad).addCathedralChain().addReverb("CATHEDRAL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.cathedralPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(4);this.cathedralPad.triggerAttackRelease(t,6*Math.random()+12),this.scheduleNext(e,1e4,15e3)};e()}}class GlacialEtherealEngine extends BaseSoundEngine{constructor(){super("Glacial Ethereal")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.glacialPad=SynthFactory.createPad("triangle","GLACIAL");const i=new AudioChainBuilder(this.glacialPad).addGlacialChain().addReverb("GLACIAL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.glacialPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(2);this.glacialPad.triggerAttackRelease(t,8*Math.random()+18),this.scheduleNext(e,12e3,18e3)};e()}}class DarkMatterEngine extends BaseSoundEngine{constructor(){super("Dark Matter")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.darkDrone=SynthFactory.createMonoSynth("sawtooth","CONTINUOUS_DRONE"),this.harmonicLayer=SynthFactory.createPad("sine","LONG_SUSTAIN");const i=new AudioChainBuilder(this.darkDrone).addFilter("DEEP_LOWPASS").addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume),a=new AudioChainBuilder(this.harmonicLayer).addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.darkDrone,this.harmonicLayer),this.effects.push(...i.effects,...a.effects),this.lfos=[...i.lfos||[],...a.lfos||[]]}startGenerativePattern(){if(this.currentScale.length>0){const e=this.currentScale[0];this.darkDrone.triggerAttack(e)}const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(2);this.harmonicLayer.triggerAttackRelease(t,15*Math.random()+10),this.scheduleNext(e,8e3,12e3)};e()}onScaleChange(e){this.darkDrone&&this.isActive&&e.length>0&&(this.darkDrone.triggerRelease(),setTimeout(()=>{this.isActive&&this.darkDrone.triggerAttack(e[0])},500))}stop(){this.darkDrone&&this.darkDrone.triggerRelease(),super.stop()}}class AuroraFieldEngine extends BaseSoundEngine{constructor(){super("Aurora Field")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.auroraPad=SynthFactory.createPad("triangle","LONG_SUSTAIN");const i=new AudioChainBuilder(this.auroraPad).addAuroraChain().addReverb("LARGE_HALL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.auroraPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.auroraPad.triggerAttackRelease(t,9*Math.random()+6),this.scheduleNext(e,4e3,6e3)};e()}}class GlassHorizonEngine extends BaseSoundEngine{constructor(){super("Glass Horizon")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.glassPad=SynthFactory.createPad("triangle","VERY_SLOW_ETHEREAL");const i=new AudioChainBuilder(this.glassPad).addGlassChain().addReverb("LARGE_HALL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.glassPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.glassPad.triggerAttackRelease(t,10*Math.random()+8),this.scheduleNext(e,5e3,8e3)};e()}}class NebulaDriftEngine extends BaseSoundEngine{constructor(){super("Nebula Drift")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.nebulaPad=SynthFactory.createPad("sine","ULTRA_SLOW_ETHEREAL");const i=new AudioChainBuilder(this.nebulaPad).addNebulaChain().addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.nebulaPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(4);this.nebulaPad.triggerAttackRelease(t,14*Math.random()+10),this.scheduleNext(e,6e3,9e3)};e()}}class ThermalLayersEngine extends BaseSoundEngine{constructor(){super("Thermal Layers")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.thermalPad=SynthFactory.createPad("sawtooth","LONG_SUSTAIN");const i=new AudioChainBuilder(this.thermalPad).addThermalChain().addReverb("STANDARD",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.thermalPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.thermalPad.triggerAttackRelease(t,8*Math.random()+6),this.scheduleNext(e,4e3,7e3)};e()}}class DeepResonanceEngine extends BaseSoundEngine{constructor(){super("Deep Resonance")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.resonantCore=SynthFactory.createMonoSynth("sawtooth","CONTINUOUS_DRONE"),this.harmonicSynth=SynthFactory.createPad("sine","LONG_SUSTAIN");const i=new AudioChainBuilder(this.resonantCore).addFilter("RESONANT_BANDPASS").addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume),a=new AudioChainBuilder(this.harmonicSynth).addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.resonantCore,this.harmonicSynth),this.effects.push(...i.effects,...a.effects),this.lfos=[...i.lfos||[],...a.lfos||[]]}startGenerativePattern(){if(this.currentScale.length>0){const e=this.currentScale[0];this.resonantCore.triggerAttack(e)}const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.harmonicSynth.triggerAttackRelease(t,12*Math.random()+8),this.scheduleNext(e,5e3,8e3)};e()}onScaleChange(e){this.resonantCore&&this.isActive&&e.length>0&&(this.resonantCore.triggerRelease(),setTimeout(()=>{this.isActive&&this.resonantCore.triggerAttack(e[0])},500))}stop(){this.resonantCore&&this.resonantCore.triggerRelease(),super.stop()}}class CosmicDriftEngine extends BaseSoundEngine{constructor(){super("Cosmic Drift")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.cosmicPad=SynthFactory.createPad("sawtooth","SLOW_ETHEREAL"),this.cosmicPad.set({oscillator:{detune:15}}),this.subBass=SynthFactory.createMonoSynth("sine","CONTINUOUS_DRONE");const i=new AudioChainBuilder(this.cosmicPad).addFilter("WARM_LOWPASS").addCosmicChain().addReverb("DEEP_SPACE",this.config.reverbAmount).connectTo(this.masterVolume),a=new AudioChainBuilder(this.subBass).addReverb("DEEP_SPACE",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.cosmicPad,this.subBass),this.effects.push(...i.effects,...a.effects),this.lfos=[...i.lfos||[],...a.lfos||[]]}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);if(this.cosmicPad.triggerAttackRelease(t,8*Math.random()+6),Math.random()<.3){const e=this.currentScale[Math.floor(3*Math.random())];this.subBass.triggerAttackRelease(e,12*Math.random()+8)}this.scheduleNext(e,4e3,8e3)};e()}}class UnderwaterPalaceEngine extends BaseSoundEngine{constructor(){super("Underwater Palace")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.underwaterPad=SynthFactory.createPad("sine","LONG_SUSTAIN");const i=new AudioChainBuilder(this.underwaterPad).addUnderwaterChain().addReverb("LARGE_HALL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.underwaterPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.underwaterPad.triggerAttackRelease(t,10*Math.random()+6),this.scheduleNext(e,4e3,7e3)};e()}}class NeonNocturneEngine extends BaseSoundEngine{constructor(){super("Neon Nocturne")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.neonSynth=SynthFactory.createPad("sawtooth","MEDIUM_SUSTAIN");const i=new AudioChainBuilder(this.neonSynth).addNeonChain().addReverb("INTIMATE",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.neonSynth),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.neonSynth.triggerAttackRelease(t,4*Math.random()+3),this.scheduleNext(e,3e3,5e3)};e()}}class AtmosphericTempleEngine extends BaseSoundEngine{constructor(){super("Atmospheric Temple")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.templePad=SynthFactory.createPad("triangle","LONG_SUSTAIN");const i=new AudioChainBuilder(this.templePad).addAtmosphericChain().addReverb("LARGE_HALL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.templePad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(2);this.templePad.triggerAttackRelease(t,8*Math.random()+4),this.scheduleNext(e,3e3,6e3)};e()}}class StoneFocusEngine extends BaseSoundEngine{constructor(){super("Stone in Focus")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.abstractPad=SynthFactory.createPad("square","MEDIUM_SUSTAIN"),this.abstractPad.set({oscillator:{detune:12}});const i=new AudioChainBuilder(this.abstractPad).addDistortion(.05).addFilter("SOFT_LOWPASS").addFilterWithLFO("WARM_LOWPASS","SLOW_FILTER_SWEEP",800,1400).addReverb("STANDARD",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.abstractPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.abstractPad.triggerAttackRelease(t,6*Math.random()+4),this.scheduleNext(e,3e3,5e3)};e()}}class StringTheoryEngine extends BaseSoundEngine{constructor(){super("String Theory")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.stringEnsemble=SynthFactory.createPad("sawtooth","ORCHESTRAL");const i=new AudioChainBuilder(this.stringEnsemble).addFilter("ORCHESTRAL_LOWPASS").addStringChain().addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.stringEnsemble),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(4);this.stringEnsemble.triggerAttackRelease(t,15*Math.random()+12),this.scheduleNext(e,8e3,1e4)};e()}}class HexagonSunEngine extends BaseSoundEngine{constructor(){super("Hexagon Sun")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.geometricPad=SynthFactory.createPad("sine","MEDIUM_SUSTAIN");const i=new AudioChainBuilder(this.geometricPad).addHexagonChain().addReverb("STANDARD",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.geometricPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.geometricPad.triggerAttackRelease(t,6*Math.random()+5),this.scheduleNext(e,3e3,5e3)};e()}}class ParallelDimensionEngine extends BaseSoundEngine{constructor(){super("Parallel Dimension")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.dimensionalPad=SynthFactory.createPad("triangle","LONG_SUSTAIN"),this.dimensionalPad.set({oscillator:{detune:20}});const i=new AudioChainBuilder(this.dimensionalPad).addParallelDimensionChain().addReverb("LARGE_HALL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.dimensionalPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(3);this.dimensionalPad.triggerAttackRelease(t,9*Math.random()+7),this.scheduleNext(e,5e3,7e3)};e()}}class GentleRhubarbEngine extends BaseSoundEngine{constructor(){super("Gentle Rhubarb")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.hybridPad=SynthFactory.createPad("sawtooth","SLOW_ETHEREAL"),this.hybridPad.set({oscillator:{detune:8}});const i=new AudioChainBuilder(this.hybridPad).addGentleRhubarbChain().addReverb("LARGE_HALL",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.hybridPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=this.getRandomChord(2);this.hybridPad.triggerAttackRelease(t,10*Math.random()+6),this.scheduleNext(e,5e3,8e3)};e()}}class EtherealRhubarbEngine extends BaseSoundEngine{constructor(){super("Ethereal Rhubarb")}async initialize(e,t,n,s){super.initialize(e,t,n,s),this.etherealPad=SynthFactory.createPad("sawtooth","VERY_SLOW_ETHEREAL"),this.etherealPad.set({oscillator:{detune:12}});const i=new AudioChainBuilder(this.etherealPad).addEtherealRhubarbChain().addReverb("CAVERNOUS",this.config.reverbAmount).connectTo(this.masterVolume);this.synths.push(this.etherealPad),this.effects.push(...i.effects),this.lfos=i.lfos}startGenerativePattern(){const e=()=>{if(!this.isActive)return;const t=Math.random()<.3?1:2,n=this.getRandomChord(t);this.etherealPad.triggerAttackRelease(n,12*Math.random()+8),this.scheduleNext(e,7e3,12e3)};e()}}class SoundEngineRegistry{constructor(){this.engines=new Map,this.registerDefaultEngines()}registerDefaultEngines(){this.register("standard",StandardSoundEngine),this.register("cathedral-ethereal",CathedralEtherealEngine),this.register("glacial-ethereal",GlacialEtherealEngine),this.register("dark-matter",DarkMatterEngine),this.register("aurora-field",AuroraFieldEngine),this.register("glass-horizon",GlassHorizonEngine),this.register("nebula-drift",NebulaDriftEngine),this.register("thermal-layers",ThermalLayersEngine),this.register("deep-resonance",DeepResonanceEngine),this.register("cosmic-drift",CosmicDriftEngine),this.register("underwater-palace",UnderwaterPalaceEngine),this.register("neon-nocturne",NeonNocturneEngine),this.register("atmospheric-temple",AtmosphericTempleEngine),this.register("stone-focus",StoneFocusEngine),this.register("string-theory",StringTheoryEngine),this.register("hexagon-sun",HexagonSunEngine),this.register("parallel-dimension",ParallelDimensionEngine),this.register("gentle-rhubarb",GentleRhubarbEngine),this.register("ethereal-rhubarb",EtherealRhubarbEngine)}register(e,t){this.engines.set(e,t)}create(e,t={}){const n=this.engines.get(e);if(!n)throw new Error(`Sound engine '${e}' not found in registry`);return new n(t)}getAvailableEngines(){return Array.from(this.engines.keys())}getEngineInfo(e){const t=this.engines.get(e);if(!t)return null;return{key:e,name:(new t).name}}}class AmbientMusicManager{constructor(){this.soundEngineRegistry=new SoundEngineRegistry,this.currentSoundEngine=null,this.currentMood="calm",this.isPlaying=!1,this.randomMoodInterval=null,this.randomEngineInterval=null}async setSoundEngine(e,t={}){return console.debug("Setting sound engine to:",e),this.currentSoundEngine&&this.currentSoundEngine.stop(),this.currentSoundEngine=this.soundEngineRegistry.create(e,t),await this.currentSoundEngine.initialize("undefined"!=typeof masterVolume?masterVolume:null,"undefined"!=typeof reverb?reverb:null,"undefined"!=typeof delay?delay:null,"undefined"!=typeof filter?filter:null),"undefined"!=typeof scales&&this.currentMood&&scales[this.currentMood]&&this.currentSoundEngine.setScale(scales[this.currentMood]),this.isPlaying&&this.currentSoundEngine.start(),this.currentSoundEngine}setMood(e){console.debug("Setting mood to:",e),this.currentMood=e,this.currentSoundEngine&&"undefined"!=typeof scales&&scales[e]&&this.currentSoundEngine.setScale(scales[e])}async start(){if(!this.currentSoundEngine)throw new Error("No sound engine selected");console.debug("Starting music manager"),this.isPlaying=!0,this.currentSoundEngine.start()}stop(){console.debug("Stopping music manager"),this.isPlaying=!1,this.currentSoundEngine&&this.currentSoundEngine.stop(),this.randomMoodInterval&&(clearInterval(this.randomMoodInterval),this.randomMoodInterval=null),this.randomEngineInterval&&(clearInterval(this.randomEngineInterval),this.randomEngineInterval=null)}updateConfig(e){this.currentSoundEngine&&(void 0!==e.density&&this.currentSoundEngine.updateDensity(e.density),void 0!==e.reverbAmount&&this.currentSoundEngine.updateReverb(e.reverbAmount))}getAvailableSoundEngines(){return this.soundEngineRegistry.getAvailableEngines().map(e=>this.soundEngineRegistry.getEngineInfo(e))}getAvailableMoods(){return"undefined"!=typeof scales?Object.keys(scales):[]}startRandomMoodCycle(){console.debug("Starting random mood cycle"),this.randomMoodInterval&&clearInterval(this.randomMoodInterval);const e=document.getElementById("random-interval"),t=void 0!==e?parseInt(e.value):10,n=60*t*1e3;console.debug(`🎵 Starting mood random cycle: ${t} minutes`);const s=document.getElementById("mood");this.randomMoodInterval=setInterval(()=>{this.isPlaying&&void 0!==s&&"random"===s.value?this.changeToRandomMood():(clearInterval(this.randomMoodInterval),this.randomMoodInterval=null)},n)}changeToRandomMood(){const e=this.getAvailableMoods();if(0===e.length)return;let t;do{t=e[Math.floor(Math.random()*e.length)]}while(t===this.currentMood&&e.length>1);console.debug("Random mood change to:",t),this.setMood(t),"undefined"!=typeof currentActiveMood&&(currentActiveMood=t)}startRandomEngineCycle(){console.debug("Starting random engine cycle"),this.randomEngineInterval&&clearInterval(this.randomEngineInterval);const e=document.getElementById("random-interval"),t=void 0!==e?parseInt(e.value):10,n=60*t*1e3;console.debug(`🎵 Starting sound engine random cycle: ${t} minutes`);const s=document.getElementById("sound-engine");this.randomEngineInterval=setInterval(()=>{this.isPlaying&&void 0!==s&&"random"===s.value?this.changeToRandomEngine():(clearInterval(this.randomEngineInterval),this.randomEngineInterval=null)},n)}async changeToRandomEngine(){console.debug("Changing to random engine");const e=this.soundEngineRegistry.getAvailableEngines();if(0===e.length)return;let t,n="";this.currentSoundEngine&&(n=this.getCurrentEngineKey());do{t=e[Math.floor(Math.random()*e.length)]}while(t===n&&e.length>1);console.debug(`Random engine change: ${n} → ${t}`);try{await this.setSoundEngine(t,{density:"undefined"!=typeof densitySlider?parseInt(densitySlider.value):5,reverbAmount:"undefined"!=typeof reverbSlider?parseFloat(reverbSlider.value):.5}),this.updateEngineStatusDisplay(t)}catch(e){console.error("Error during random engine change:",e)}}getCurrentEngineKey(){if(!this.currentSoundEngine)return"";const e=this.soundEngineRegistry.getAvailableEngines();for(const t of e){const e=this.soundEngineRegistry.getEngineInfo(t);if(e&&this.currentSoundEngine.name===e.name)return t}return""}updateEngineStatusDisplay(e){const t=this.soundEngineRegistry.getEngineInfo(e);t&&"function"==typeof updateSoundEngineStatus&&updateSoundEngineStatus(t.name)}startRandomCycles(){console.debug("Starting all random cycles"),"undefined"!=typeof moodSelect&&"random"===moodSelect.value&&this.startRandomMoodCycle(),"undefined"!=typeof soundEngineSelect&&"random"===soundEngineSelect.value&&this.startRandomEngineCycle()}stopRandomCycles(){console.debug("Stopping all random cycles"),this.randomMoodInterval&&(clearInterval(this.randomMoodInterval),this.randomMoodInterval=null),this.randomEngineInterval&&(clearInterval(this.randomEngineInterval),this.randomEngineInterval=null)}isRandomizationActive(){return null!==this.randomMoodInterval||null!==this.randomEngineInterval}restartRandomCycles(){console.debug("Restarting random cycles with new interval"),this.stopRandomCycles(),setTimeout(()=>{this.startRandomCycles()},100)}}"undefined"!=typeof window&&(window.AmbientMusicManager=AmbientMusicManager),console.log("✅ AmbientMusicManager class loaded with randomization support");
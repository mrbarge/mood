class OceanWaveSystem{constructor(){this.isActive=!1,this.noise=null,this.gain=null,this.filter=null,this.waveTimeout=null,this.currentWavePhase="waiting",this.currentNoiseType="pink",this.waveStartTime=0,this.waveDuration=0,this.waveReverb=null}async init(){const e=document.getElementById("base-level"),t=document.getElementById("filter-freq");this.gain=new Tone.Gain(parseFloat(e.value)),this.filter=new Tone.Filter(parseInt(t.value),"lowpass"),this.noise=new Tone.Noise(this.currentNoiseType),this.waveReverb=new Tone.Reverb({decay:3,wet:.4,preDelay:.02}),this.noise.connect(this.filter),this.filter.connect(this.gain),this.gain.connect(this.waveReverb),this.waveReverb.connect(masterVolume),this.updateVolume()}start(){this.isActive||(this.isActive=!0,this.noise&&(this.noise.start(),this.scheduleNextWave()))}stop(){this.isActive&&(this.isActive=!1,this.currentWavePhase="waiting",this.waveTimeout&&(clearTimeout(this.waveTimeout),this.waveTimeout=null),this.noise&&this.noise.stop())}dispose(){this.stop(),this.noise&&this.noise.dispose(),this.gain&&this.gain.dispose(),this.filter&&this.filter.dispose(),this.waveReverb&&this.waveReverb.dispose()}scheduleNextWave(){if(!this.isActive)return;const e=document.getElementById("pause-between"),t=parseFloat(e.value),i=t+(Math.random()-.5)*t*.5;this.currentWavePhase="waiting",this.waveTimeout=setTimeout(()=>{this.isActive&&this.startWave()},1e3*i)}startWave(){if(!this.isActive)return;const e=document.getElementById("min-duration"),t=document.getElementById("max-duration"),i=document.getElementById("base-level"),s=document.getElementById("peak-level"),a=document.getElementById("build-speed"),n=parseFloat(e.value),o=parseFloat(t.value),u=parseFloat(i.value),r=parseFloat(s.value),h=parseFloat(a.value);this.waveDuration=n+Math.random()*(o-n),this.waveStartTime=Tone.now();const v=h/2.5,l=this.waveDuration*(.15+.25*Math.random())*(1/v),d=this.waveDuration*(.1+.2*Math.random()),c=this.waveDuration-l-d;this.currentWavePhase="building";const m=r*(.8+.4*Math.random());this.gain.gain.rampTo(m,l),setTimeout(()=>{if(!this.isActive)return;this.currentWavePhase="sustaining";const e=m*(.9+.2*Math.random());this.gain.gain.rampTo(e,.5*d),setTimeout(()=>{if(!this.isActive)return;this.currentWavePhase="receding";const e=u*(.5+1*Math.random());this.gain.gain.rampTo(e,c),setTimeout(()=>{this.isActive&&this.scheduleNextWave()},1e3*c)},1e3*d)},1e3*l)}updateVolume(){if(this.gain){const e=document.getElementById("noise-volume"),t=parseInt(e.value);this.gain.gain.rampTo(Tone.dbToGain(t),.1)}}updateNoiseType(e){this.currentNoiseType=e,this.isActive&&this.noise&&(this.noise.stop(),this.noise.dispose(),this.noise=new Tone.Noise(e),this.noise.connect(this.filter),this.noise.start())}updateFilter(e){if(this.filter){const t=document.getElementById("filter-freq");this.filter.frequency.rampTo(e||parseInt(t.value),.5)}}updateBaseLevel(){if("waiting"===this.currentWavePhase&&this.gain){const e=document.getElementById("base-level"),t=parseFloat(e.value);this.gain.gain.rampTo(t,1)}}getCurrentIntensity(){return this.gain?this.gain.gain.value:0}getWaveInfo(){if(!this.isActive)return"Stopped";switch(this.currentWavePhase){case"waiting":return"Waiting for next wave...";case"building":return`Building wave (${this.waveDuration.toFixed(1)}s total)`;case"sustaining":return"Wave sustaining...";case"receding":return"Wave receding...";default:return"Wave active"}}}class OceanWaveManager{constructor(){this.waveSystem=null,this.isInitialized=!1}async initialize(){this.isInitialized||(this.waveSystem=new OceanWaveSystem,await this.waveSystem.init(),this.isInitialized=!0,this.setupEventListeners())}setupEventListeners(){const e=document.getElementById("noise-volume"),t=document.getElementById("base-level"),i=document.getElementById("peak-level"),s=document.getElementById("build-speed"),a=document.getElementById("min-duration"),n=document.getElementById("max-duration"),o=document.getElementById("pause-between"),u=document.getElementById("noise-type"),r=document.getElementById("filter-freq");e&&e.addEventListener("input",()=>this.updateVolume()),t&&t.addEventListener("input",()=>this.updateBaseLevel()),i&&i.addEventListener("input",()=>this.updateWaveSettings()),s&&s.addEventListener("input",()=>this.updateWaveSettings()),a&&a.addEventListener("input",()=>this.updateWaveSettings()),n&&n.addEventListener("input",()=>this.updateWaveSettings()),o&&o.addEventListener("input",()=>this.updateWaveSettings()),u&&u.addEventListener("change",()=>this.updateNoiseType()),r&&r.addEventListener("input",()=>this.updateFilter())}async toggle(){this.isInitialized||await this.initialize();const e=document.querySelector('.ambient-toggle[data-sound="waves"]');e&&(e.classList.contains("active")?this.waveSystem.isActive||(console.log("ðŸŒŠ Starting waves..."),this.waveSystem.start()):this.waveSystem.isActive&&(console.log("ðŸŒŠ Stopping waves..."),this.waveSystem.stop())),this.updateStatus()}updateVolume(){this.waveSystem&&this.waveSystem.updateVolume()}updateWaveSettings(){console.debug("Wave settings updated - will apply to next wave cycle")}updateNoiseType(){const e=document.getElementById("noise-type"),t=e?e.value:"pink";this.waveSystem&&(this.waveSystem.updateNoiseType(t),this.waveSystem.updateFilter())}updateFilter(){this.waveSystem&&this.waveSystem.updateFilter()}updateBaseLevel(){this.waveSystem&&this.waveSystem.updateBaseLevel()}updateStatus(){}isActive(){return!!this.waveSystem&&this.waveSystem.isActive}getCurrentIntensity(){return this.waveSystem?this.waveSystem.getCurrentIntensity():0}getWaveInfo(){return this.waveSystem?this.waveSystem.getWaveInfo():"Not initialized"}dispose(){this.waveSystem&&(this.waveSystem.dispose(),this.waveSystem=null),this.isInitialized=!1}}